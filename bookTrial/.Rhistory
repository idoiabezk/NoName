example <- function(){
b <- c(1, 2, 3, 4, 5, 6)
b <- sample(b, size = 2)
sum(b)
}
example <- function(){
b <- c(1, 2, 3, 4, 5, 6)
b <- sample(b, size = 2)
sum(b)
}
sum(b)
b <- c(1, 2, 3, 4, 5, 6)
b <- sample(b, size = 2)
sum(b)
example <- function(){
b <- c(1, 2, 3, 4, 5, 6)
b <- sample(b, size = 2)
sum(b)
}
sum(b)
roll <- function() {
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
sum(dice)
}
ana ()
ana <- function(){
b <- c(1, 2, 3, 4, 5, 6)
b <- sample(b, size = 2)
sum(b)
}
ana ()
ana(b =1:4)
a <- 1:6 #we generate the object named "a" and it will contain the result of the operation "1:6"
a
a+2
b <- 1:4
ana(b)
ana2 <- function(b2){
b3 <- sample(b2, size = 2)
sum(b3)
}
ana (b2)
ana2 <- function(b2 = 1:4){
b3 <- sample(b2, size = 2)
sum(b3)
}
ana (b2)
ana2 <- function(b2){
b3 <- sample(b2, size = 2)
sum(b3)
}
ana2 ()
ana <- function(b2){
b3 <- sample(b2, size = 2)
sum(b3)
}
ana ()
ana <- function(b2){
b3 <- sample(b2, size = 2)
sum(b3)
}
ana (b2 = 1:4)
library(ggplot2)
x <- c(1,1,2,2,2,3)
qplot(x, binwidth = 1)
qplot(x, binwidth = 1) #the function and the arguments we want to use
v1 <- c(1,2,3,4) #numerical
v1
v2 <- c("I", "am", "Idoia") #text
v2
v3 <- c(TRUE, FALSE, TRUE) #logical
v3
v1 <- c(1,2,3,4) #numerical
v1
v2 <- c("I", "am", "Idoia") #text
v2
v3 <- c(TRUE, FALSE, TRUE) #logical
v3
is.vector(v1)
length(v1)
length(v1)
names(v1)<- c("one", "two", "three", "four")
attributes(v1)
v1
names(v1) <- NULL
v1
v1 <- c(1,2,3,4) #numerical
v1
v2 <- c("I", "am", "Idoia") #text
v2
v3 <- c(TRUE, FALSE, TRUE) #logical
v3
is.vector(v1)
names(v1)<- c("one", "two", "three", "four") #names if the attribute that we want to add and in brackets the vector that we want to add them to
attributes(v1) #will show us the attributes of the vector "v1"
dim(v1) <- c(2,3)
dim(v1) <- c(2,3,4,5)
dim(v1) <- c(2, 3)
v1 <- c(1,2,3,4) #numerical
v1
dim(v1) <- c(2, 3)
dim(v1) <- c(1, 2)
die <- c(1,2,3,4,5,6)
dim(die) <- c(2, 3)
die
v1 <- c(1,2,3,4)
dim(v1) <- c(1, 2)
dim(v1) <- c(2,3)
v1 <- c(1,2,3,4,5,6)
dim(v1) <- c(2,3)
dim
v1
v1 <- c(1,2,3,4,5,6) #numerical
v1
is.vector(v1)
length(v1)
names(v1)<- c("one", "two", "three", "four", "five", "six") #names if the attribute that we want to add and in brackets the vector that we want to add them to
attributes(v1) #will show us the attributes of the vector "v1"
v1
names(v1) <- NULL
v1
dim(v1) <- c(2,3)
v1
m <- matrix(v1, nrow =2) #it will fill it by column
m1 <- matrix(v1, nrow =2) #it will fill it by column
m1
m2 <- matrix(v1, nrow =2, byrow = TRUE) #it will fill it by row
m2
ar<- array(c(11:14,21:24,31:34), dim = c(2,2,3))
ar
l1 <- list(10:30, "Idoia", list(TRUE, FALSE))
l1
df1 <- data.frame(people = c("Victoria", "Thanh", "Idoia"),
description = c("student", "boss", "student"), height = c(1.63, 1.70, 1.65))
df1
df1 <- data.frame(people = c("Victoria", "Thanh", "Idoia"),
description = c("student", "boss", "student"), workingTime = c(0.17, 25, 2.17))
df1
df1 <- data.frame(People = c("Victoria", "Thanh", "Idoia"),
Position = c("student", "boss", "student"), YearsWorking = c(0.17, 25, 2.17))
df1
df1 <- data.frame(People = c("Victoria", "Thanh", "Idoia"),
Position = c("Student", "Boss", "Student"), YearsWorking = c(0.17, 25, 2.17))
df1
class(m2)
class(m1)
ar1<- array(c(11:14,21:24,31:34), dim = c(2,2,3))
ar1
class(df1)
now <- Sys.time()
now
typeof(now)
class(now)
v4<- c("male", "female", "male")
class(v4)
gender <- factor(v4)
class(v4)
attributes(gender)
class(v4)
gender <- factor(v4)
attributes(gender)
unclass(gender)
df1[2,3]
df1[2,c(2,3)]
df2<- df1[1:2,1:2]
df2
df1[1,-2]
df1[1:3,-2]
df1[1,]#it will extract everything in the first row
df1$People
df1[[People]]
df1[[People]]
v5<- c(0,0,0,0,0,0)
v5<- c(0,0,0,0,0,0)
v5[1]<-1000 #we select the first value of the vector "v5" and we replace it by "1000"
v5
v5[c(1,2,3)]<-c(1,1,1)
v5
v5[7]<-0 #we select the 7th value of the vector v5 which is empty and replace it for a 0
v5
df1$Position<-NULL #We select the column "Position" from the data frame "df1" and delete it
df1
3<2
3 %in% c(1,2,3)
c(1,2,3)%in%c(3,4,5)
cond1&cond2 #are "cond1" and "cond2" true?
cond1<-2<3
cond2<-3<3
cond1&cond2 #are "cond1" and "cond2" true?
```{r}
num<-2 #define what why want to study
if(num>0){ #if our num is bigger than zero do...
num<-num-1 #...num-1
}
num<-2 #define what why want to study
if(num>0){ #if our num is bigger than zero do...
num<-num-1 #...num-1
}
num<-2#define what why want to study
if(num>0){ #if our num is bigger than zero do...
num<-num-1 #...num-1
}
num
num<-2#define what why want to study
if(num<0){ #if our num is smaller than zero do...
num<-num-1 #...num-1
} else { #in the case that num is NOT smaller than zero do...
num<-num+1 #... do num + 1
}
num
t<-3.14
trunc(t)
WorkingYears<-c("Victoria"=0.17, "Thanh"=25, "Idoia"=2.17)
WorkingYears["Thanh"]
unname(WorkingYears["Thanh"])
print(num)
num<-1000
print(num)
num2<-1000
print(num2)
num2<-100000
print(num2)
num2<-10000
print(num2)
class(num2)<- c("POSIXct","POSIXt")
print(num2)
a<- 1:6
A<-expand.grid(a,a)
A
a<- 1:6
A<-expand.grid(a,a)
A
num<--3
while(num<0){
num<-num+2
}
num
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(100)
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(100)
for (value in c("I", "am", "Idoia")) {
print("one run")
}
for (value in c("I", "am", "Idoia")) {
print("IBE") #it will print for every value in the vector
}
library(rsconnect)
### **Missing information**
When we miss some information R will display "NA" which means "Not Available"
library(rsconnect)
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name = 'sunhh3-idoia-beloqui0ezquer',
token = '740865509140F430BC61B06257ED4A65',
secret = 'ZNQHnYR8FGbdKKmkCQSUv71MpRTgYeg76CXQqay/',
server = 'posit.cloud')
rlang::last_trace()
rsconnect::deployApp(appDir="shiny", server="posit.cloud")
rsconnect::setAccountInfo(name = 'sunhh3-idoia-beloqui0ezquer',
+                           token = '740865509140F430BC61B06257ED4A65',
rsconnect::deployApp(appDir="shiny", server="posit.cloud")
#####Set working directory#####
working.directory <- "F:/OREBRO/CP analysis/Food project/Result/R/LC-qToF/Calibration/"
#####PREPARE DATASET FOR PATTERN RECONSTRUCTION#####
{
#Open input file
input <- read_xlsx(paste(working.directory,"SCCPs_input_ref_LC.xlsx", sep = ""))
input$STD_code <- as.factor(input$STD_code)
#Create all possible binary combinations between given calibration sets
Combinations <- combn(x = levels(input$STD_code),m = 2,FUN = NULL,simplify = TRUE)
#Store sum RFs for each chain length standard
input <- input %>% group_by(Reference_standard) %>% mutate(Sum_response_factor = sum(Response_factor, na.rm = TRUE))
input[c(1:5)] <- lapply(input[c(1:5)], as.factor)
input$Response_factor[is.na(input$Response_factor)] <- 0
}
####Open sample data####
{
sample <- read_xlsx(paste(working.directory,"SCCPs_B2324.xlsx", sep = ""))
####Set sample name####
sample.name <- "B2324"
####RUN PATTERN RECONSTRACTION FOR SELECTED (LOADED) SAMPLE####
{
sample$Chain_length <- as.factor(sample$Chain_length)
sample$Area <- as.numeric(sample$Area)
#Calculate relative area distribution within each homologue group
sample$Relative_distribution <- NA
sample$Area[is.na(sample$Area)] <- 0
sample <- sample %>% group_by(Chain_length) %>% mutate(Relative_distribution = Area/sum(Area, na.rm = TRUE))
results <- sample
results[c("Comp_1","Comp_2","Fraction_Comp_1","Simulated_pattern")] <- NA
#Deconvolation of homologue patterns
for (i in 1:length(levels(sample$Chain_length))) {
REF <- sample$Relative_distribution[sample$Chain_length == levels(input$Chain_length)[i]]
Distance <- 100
for (z in 1:length(Combinations[1,])){
C_1 <- subset(input,subset = (STD_code == Combinations[1,z] & Chain_length == levels(sample$Chain_length)[i]))
C_2 <- subset(input,subset = (STD_code == Combinations[2,z] & Chain_length == levels(sample$Chain_length)[i]))
for (j in 1:100) {
Combo <- (C_1$Response_factor*j+C_2$Response_factor*(100-j))/sum((C_1$Response_factor*j+C_2$Response_factor*(100-j)), na.rm=TRUE)
if (Distance > (sum(sqrt((REF-Combo)^2)))) {
results$Comp_1[results$Chain_length == levels(sample$Chain_length)[i]] <- as.character(C_1$STD_code)
results$Comp_2[results$Chain_length == levels(sample$Chain_length)[i]] <- as.character(C_2$STD_code)
results$Fraction_Comp_1 <- j
results$Simulated_pattern[results$Chain_length == levels(input$Chain_length)[i]] <- Combo
Distance <- sum(sqrt((REF-Combo)^2))
}
}
}
}
#Calculate concentrations (ng per microliter)
results[c("RF_1st", "RF_2nd", "Concentration")] <- NA
results[c("RF_1st", "RF_2nd", "Concentration")] <- sapply(results[c("RF_1st", "RF_2nd", "Concentration")], as.numeric)
results$Fraction_Comp_1<- as.numeric(results$Fraction_Comp_1)
results$RF_1st[results$Chain_length == levels(results$Chain_length)[1]] <- input$Sum_response_factor[input$STD_code == results$Comp_1 & input$Chain_length == levels(results$Chain_length)[1]]
for (i in 1:length(levels(results$Chain_length))) {
results$RF_1st[results$Chain_length == levels(results$Chain_length)[i]] <- input$Response_factor[input$STD_code == results$Comp_1 & input$Chain_length == levels(results$Chain_length)[i]]
results$RF_2nd[results$Chain_length == levels(results$Chain_length)[i]] <- input$Response_factor[input$STD_code == results$Comp_2 & input$Chain_length == levels(results$Chain_length)[i]]
}
results <- results %>% group_by(Chain_length) %>% mutate(Concentration= sum(Area)/sum(RF_1st*(Fraction_Comp_1/100)+RF_2nd*((100-Fraction_Comp_1)/100)))
#Visualization of results
plot_table<-data.frame(Distribution = c(results$Relative_distribution,results$Simulated_pattern),Homologue = results$Homologue, Chain_length = results$Chain_length, Origin = rep(as.factor(c("Measured","Simulated")), each = nrow(results)))
plot_table$Homologue <- factor(plot_table$Homologue, levels=unique(plot_table$Homologue))
plot <- ggplot(plot_table, aes(x = Homologue,y = Distribution*100, fill = Origin, colour = Origin))+
geom_bar(stat="identity",position = position_dodge(width = 0.9), width = 0.8, size = .4)+
theme(panel.background = element_blank())+
scale_fill_manual(values=c("darkolivegreen3", "darkslategray4"))+
scale_color_manual(values=c("darkolivegreen4", "darkslategray"))+
ggtitle(label = paste(sample.name," - Distribution of CP homologues")) +
theme(plot.title = element_text(size = 10, face = "bold", hjust = 0))+
xlab("") + ylab("Relative area distribution, %")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(legend.key.size =  unit(0.15, "in"),
legend.text = element_text(size=10),
legend.title = element_text(size=10),
panel.background = element_rect(fill = "white"),panel.border = element_rect(fill = NA, colour = "grey20"),
panel.grid.major.y = element_line(colour = "grey50"),
panel.grid.minor.y = element_line(colour = "grey80"),
panel.grid.major.x = element_blank(),
legend.position = "bottom",strip.background = element_rect(fill = "grey20"), strip.text = element_text(colour = "white", face = "bold"))+
facet_wrap(.~ Chain_length, scales = "free",nrow = 4, ncol = 4)
results_output <-results %>% group_by(Chain_length)  %>% summarise(median(Concentration))
results_output$Type <- results$Type[1]
results_output$Sample <- sample.name
results_output$Chain_length <- as.character(results_output$Chain_length)
results_output <- cbind(results_output,results %>% group_by(Chain_length) %>% summarise(Comp_1 = first(Comp_1), Comp_2 = first(Comp_2), Fraction_Comp_1 = first(Fraction_Comp_1)))
results_output$Comment <- paste("The best match:",results_output$Fraction_Comp_1[1],"% of ",results_output$Comp_1[1]," and ",100-results_output$Fraction_Comp_1[1],"% of ",results_output$Comp_2[1], sep="")
results_output <- rbind(results_output,c(paste("Sum ",results_output$Type[1],"s",sep=""),sum(results_output$`median(Concentration)`),results_output$Type[1],sample.name))
results_output <- results_output[-c(5:8)]
colnames(results_output) <- c("Chain length","Concentration, ng/\U00B5L","Type","Sample name","Comment")
}
}
####VIEW RESULTS####
#View Overview
print(results_output)
#View full results
print(results)
#View graph
plot
####SAVE RESULTS####
#Set save directory
save.directory <- "F:/OREBRO/CP analysis/Food project/Result/R/LC-qToF/Results/SCCPs/"
#Save Overview
write.table(results_output, paste(save.directory,sample.name,"-overview", ".txt", sep = ""), sep="\t")
#Save full results
write.table(results, paste(save.directory,sample.name,"-full_results", ".txt", sep = ""), sep="\t")
#Save distribution plot
ggsave(filename = paste(sample.name,"-CP_distribution_plot",".tiff", sep =""),device = "tiff",plot = plot, path = save.directory,width = unit(10,"cm"),height = unit(5,"cm"))
####Open sample data####
{
sample <- read_xlsx(paste(working.directory,"SCCPs_B25.xlsx", sep = ""))
####Set sample name####
sample.name <- "B25"
####RUN PATTERN RECONSTRACTION FOR SELECTED (LOADED) SAMPLE####
{
sample$Chain_length <- as.factor(sample$Chain_length)
sample$Area <- as.numeric(sample$Area)
#Calculate relative area distribution within each homologue group
sample$Relative_distribution <- NA
sample$Area[is.na(sample$Area)] <- 0
sample <- sample %>% group_by(Chain_length) %>% mutate(Relative_distribution = Area/sum(Area, na.rm = TRUE))
results <- sample
results[c("Comp_1","Comp_2","Fraction_Comp_1","Simulated_pattern")] <- NA
#Deconvolation of homologue patterns
for (i in 1:length(levels(sample$Chain_length))) {
REF <- sample$Relative_distribution[sample$Chain_length == levels(input$Chain_length)[i]]
Distance <- 100
for (z in 1:length(Combinations[1,])){
C_1 <- subset(input,subset = (STD_code == Combinations[1,z] & Chain_length == levels(sample$Chain_length)[i]))
C_2 <- subset(input,subset = (STD_code == Combinations[2,z] & Chain_length == levels(sample$Chain_length)[i]))
for (j in 1:100) {
Combo <- (C_1$Response_factor*j+C_2$Response_factor*(100-j))/sum((C_1$Response_factor*j+C_2$Response_factor*(100-j)), na.rm=TRUE)
if (Distance > (sum(sqrt((REF-Combo)^2)))) {
results$Comp_1[results$Chain_length == levels(sample$Chain_length)[i]] <- as.character(C_1$STD_code)
results$Comp_2[results$Chain_length == levels(sample$Chain_length)[i]] <- as.character(C_2$STD_code)
results$Fraction_Comp_1 <- j
results$Simulated_pattern[results$Chain_length == levels(input$Chain_length)[i]] <- Combo
Distance <- sum(sqrt((REF-Combo)^2))
}
}
}
}
#Calculate concentrations (ng per microliter)
results[c("RF_1st", "RF_2nd", "Concentration")] <- NA
results[c("RF_1st", "RF_2nd", "Concentration")] <- sapply(results[c("RF_1st", "RF_2nd", "Concentration")], as.numeric)
results$Fraction_Comp_1<- as.numeric(results$Fraction_Comp_1)
results$RF_1st[results$Chain_length == levels(results$Chain_length)[1]] <- input$Sum_response_factor[input$STD_code == results$Comp_1 & input$Chain_length == levels(results$Chain_length)[1]]
for (i in 1:length(levels(results$Chain_length))) {
results$RF_1st[results$Chain_length == levels(results$Chain_length)[i]] <- input$Response_factor[input$STD_code == results$Comp_1 & input$Chain_length == levels(results$Chain_length)[i]]
results$RF_2nd[results$Chain_length == levels(results$Chain_length)[i]] <- input$Response_factor[input$STD_code == results$Comp_2 & input$Chain_length == levels(results$Chain_length)[i]]
}
results <- results %>% group_by(Chain_length) %>% mutate(Concentration= sum(Area)/sum(RF_1st*(Fraction_Comp_1/100)+RF_2nd*((100-Fraction_Comp_1)/100)))
#Visualization of results
plot_table<-data.frame(Distribution = c(results$Relative_distribution,results$Simulated_pattern),Homologue = results$Homologue, Chain_length = results$Chain_length, Origin = rep(as.factor(c("Measured","Simulated")), each = nrow(results)))
plot_table$Homologue <- factor(plot_table$Homologue, levels=unique(plot_table$Homologue))
plot <- ggplot(plot_table, aes(x = Homologue,y = Distribution*100, fill = Origin, colour = Origin))+
geom_bar(stat="identity",position = position_dodge(width = 0.9), width = 0.8, size = .4)+
theme(panel.background = element_blank())+
scale_fill_manual(values=c("darkolivegreen3", "darkslategray4"))+
scale_color_manual(values=c("darkolivegreen4", "darkslategray"))+
ggtitle(label = paste(sample.name," - Distribution of CP homologues")) +
theme(plot.title = element_text(size = 10, face = "bold", hjust = 0))+
xlab("") + ylab("Relative area distribution, %")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(legend.key.size =  unit(0.15, "in"),
legend.text = element_text(size=10),
legend.title = element_text(size=10),
panel.background = element_rect(fill = "white"),panel.border = element_rect(fill = NA, colour = "grey20"),
panel.grid.major.y = element_line(colour = "grey50"),
panel.grid.minor.y = element_line(colour = "grey80"),
panel.grid.major.x = element_blank(),
legend.position = "bottom",strip.background = element_rect(fill = "grey20"), strip.text = element_text(colour = "white", face = "bold"))+
facet_wrap(.~ Chain_length, scales = "free",nrow = 4, ncol = 4)
results_output <-results %>% group_by(Chain_length)  %>% summarise(median(Concentration))
results_output$Type <- results$Type[1]
results_output$Sample <- sample.name
results_output$Chain_length <- as.character(results_output$Chain_length)
results_output <- cbind(results_output,results %>% group_by(Chain_length) %>% summarise(Comp_1 = first(Comp_1), Comp_2 = first(Comp_2), Fraction_Comp_1 = first(Fraction_Comp_1)))
results_output$Comment <- paste("The best match:",results_output$Fraction_Comp_1[1],"% of ",results_output$Comp_1[1]," and ",100-results_output$Fraction_Comp_1[1],"% of ",results_output$Comp_2[1], sep="")
results_output <- rbind(results_output,c(paste("Sum ",results_output$Type[1],"s",sep=""),sum(results_output$`median(Concentration)`),results_output$Type[1],sample.name))
results_output <- results_output[-c(5:8)]
colnames(results_output) <- c("Chain length","Concentration, ng/\U00B5L","Type","Sample name","Comment")
}
}
####VIEW RESULTS####
#View Overview
print(results_output)
#View full results
print(results)
#View graph
plot
####SAVE RESULTS####
#Set save directory
save.directory <- "F:/OREBRO/CP analysis/Food project/Result/R/LC-qToF/Results/SCCPs/"
#Save Overview
write.table(results_output, paste(save.directory,sample.name,"-overview", ".txt", sep = ""), sep="\t")
#Save full results
write.table(results, paste(save.directory,sample.name,"-full_results", ".txt", sep = ""), sep="\t")
#Save distribution plot
ggsave(filename = paste(sample.name,"-CP_distribution_plot",".tiff", sep =""),device = "tiff",plot = plot, path = save.directory,width = unit(10,"cm"),height = unit(5,"cm"))
#References
#####Set working directory#####
working.directory <- "F:/OREBRO/CP analysis/Food project/Result/R/LC-qToF/Calibration/"
#####PREPARE DATASET FOR PATTERN RECONSTRUCTION#####
{
#Open input file
input <- read_xlsx(paste(working.directory,"SCCPs_input_ref_LC.xlsx", sep = ""))
input$STD_code <- as.factor(input$STD_code)
#Create all possible binary combinations between given calibration sets
Combinations <- combn(x = levels(input$STD_code),m = 2,FUN = NULL,simplify = TRUE)
#Store sum RFs for each chain length standard
input <- input %>% group_by(Reference_standard) %>% mutate(Sum_response_factor = sum(Response_factor, na.rm = TRUE))
input[c(1:5)] <- lapply(input[c(1:5)], as.factor)
input$Response_factor[is.na(input$Response_factor)] <- 0
}
#####Set working directory#####
working.directory <- "F:/OREBRO/CP analysis/Food project/Result/R/LC-qToF/Calibration/"
#####PREPARE DATASET FOR PATTERN RECONSTRUCTION#####
{
#Open input file
input <- read_xlsx(paste(working.directory,"SCCPs_input_ref_LC.xlsx", sep = ""))
input$STD_code <- as.factor(input$STD_code)
#Create all possible binary combinations between given calibration sets
Combinations <- combn(x = levels(input$STD_code),m = 2,FUN = NULL,simplify = TRUE)
#Store sum RFs for each chain length standard
input <- input %>% group_by(Reference_standard) %>% mutate(Sum_response_factor = sum(Response_factor, na.rm = TRUE))
input[c(1:5)] <- lapply(input[c(1:5)], as.factor)
input$Response_factor[is.na(input$Response_factor)] <- 0
}

names_from = Molecule, # name of the new column
values_from = Area,
values_fn = list)       #name of the values from PFBA:sum_21PFAS
View(GC_qToF_CPsFoodResults3)
GC_qToF_CPsFoodResults3$C9H17Cl3:C14H24Cl3 = as.numeric(GC_qToF_CPsFoodResults3$C9H17Cl3:C14H24Cl6)
GC_qToF_CPsFoodResults3$C9H17Cl3:C14H24Cl6 = as.numeric(GC_qToF_CPsFoodResults3$C9H17Cl3:C14H24Cl6)
GC_qToF_CPsFoodResults3$C9H17Cl3:C12H21Cl5 = as.numeric(GC_qToF_CPsFoodResults3$C9H17Cl3:C12H21Cl5)
GC_qToF_CPsFoodResults3$C9H16Cl4 = as.numeric(GC_qToF_CPsFoodResults3$C9H16Cl4)
rm(list = ls())
library(readxl)
GC_qToF_CPsFoodResults <- read_excel("F:/OREBRO/CP analysis/Food project/Result/Skyline/GC_qToF_CPsFoodResults.xlsx")
View(GC_qToF_CPsFoodResults)
GC_qToF_CPsFoodResults3 <- GC_qToF_CPsFoodResults |>
filter(Quantitative == "YES") |>
pivot_wider(id_cols = `Replicate Name`,
names_from = Molecule, # name of the new column
values_from = Area,
values_fn = list)       #name of the values from PFBA:sum_21PFAS
View(GC_qToF_CPsFoodResults3)
GC_qToF_CPsFoodResults3$C9H17Cl3:'13C12H18Cl8' = as.numeric(GC_qToF_CPsFoodResults3$C9H17Cl3:'13C12H18Cl8')
rm(list = ls())
library(readxl)
GC_qToF_CPsFoodResults <- read_excel("F:/OREBRO/CP analysis/Food project/Result/Skyline/GC_qToF_CPsFoodResults.xlsx")
View(GC_qToF_CPsFoodResults)
GC_qToF_CPsFoodResults3 <- GC_qToF_CPsFoodResults |>
filter(Quantitative == "YES") |>
pivot_wider(id_cols = `Replicate Name`,
names_from = Molecule, # name of the new column
values_from = Area,
values_fn = list)       #name of the values from PFBA:sum_21PFAS
View(GC_qToF_CPsFoodResults3)
GC_qToF_CPsFoodResults3$C9H17Cl3:IS = as.numeric(GC_qToF_CPsFoodResults3$C9H17Cl3:IS)
GC_qToF_CPsFoodResults3$IS = as.numeric(GC_qToF_CPsFoodResults3$IS)
CorrectedArea = GC_qToF_CPsFoodResults3$C9H17Cl3/GC_qToF_CPsFoodResults3$IS
GC_qToF_CPsFoodResults3$IS = as.numeric(GC_qToF_CPsFoodResults3$IS) |>
CorrectedArea = GC_qToF_CPsFoodResults3$C9H17Cl3/GC_qToF_CPsFoodResults3$IS
GC_qToF_CPsFoodResults3$C9H16Cl4 = as.numeric(GC_qToF_CPsFoodResults3$C9H16Cl4)
GC_qToF_CPsFoodResults3$IS = as.numeric(GC_qToF_CPsFoodResults3$IS)
CorrectedArea = GC_qToF_CPsFoodResults3$C9H17Cl3/GC_qToF_CPsFoodResults3$IS
print(CorrectedArea)
GC_qToF_CPsFoodResults3 <- GC_qToF_CPsFoodResults |>
filter(Quantitative == "YES") |>
pivot_wider(id_cols = `Replicate Name`,
names_from = Molecule, # name of the new column
values_from = Area,
values_fn = list) |>       #name of the values from PFBA:sum_21PFAS
group_by(`Replicate Name`) |>
tally()
GC_qToF_CPsFoodResults3$C9H17Cl3:IS = as.numeric(GC_qToF_CPsFoodResults3$C9H17Cl3:IS)
GC_qToF_CPsFoodResults3 <- GC_qToF_CPsFoodResults |>
filter(Quantitative == "YES") |>
pivot_wider(id_cols = `Replicate Name`,
names_from = Molecule, # name of the new column
values_from = Area,
values_fn = list)        #name of the values from PFBA:sum_21PFAS
View(GC_qToF_CPsFoodResults3)
group_by(`Replicate Name`, `IS`)
group_by(`Replicate Name`,IS)
group_by('Replicate Name',IS)
group_by('Replicate Name': IS)
GC_qToF_CPsFoodResults3$C9H17Cl3:IS = as.numeric(GC_qToF_CPsFoodResults3$C9H17Cl3:IS)
GC_qToF_CPsFoodResults3$C9H16Cl4 = as.numeric(GC_qToF_CPsFoodResults3$C9H16Cl4)
GC_qToF_CPsFoodResults3$IS = as.numeric(GC_qToF_CPsFoodResults3$IS)
CorrectedArea = GC_qToF_CPsFoodResults3$C9H16Cl4/GC_qToF_CPsFoodResults3$IS
print(CorrectedArea)
CorrectedArea<- CorrectedArea = GC_qToF_CPsFoodResults3$C9H16Cl4/GC_qToF_CPsFoodResults3$IS
CorrectedArea <- CorrectedArea = GC_qToF_CPsFoodResults3$C9H16Cl4/GC_qToF_CPsFoodResults3$IS
CorrectedArea<-CorrectedArea = GC_qToF_CPsFoodResults3$C9H16Cl4/GC_qToF_CPsFoodResults3$IS
GC_qToF_CPsFoodResults3$c(C9H17Cl3:IS) = as.numeric(GC_qToF_CPsFoodResults3$c(C9H17Cl3:IS)
GC_qToF_CPsFoodResults3$c(C9H17Cl3:IS) = as.numeric(GC_qToF_CPsFoodResults3$c(C9H17Cl3:IS))
GC_qToF_CPsFoodResults3$c(C9H17Cl3,IS) = as.numeric(GC_qToF_CPsFoodResults3$c(C9H17Cl3,IS))
GC_qToF_CPsFoodResults3$C9H17Cl3:IS = as.numeric(GC_qToF_CPsFoodResults3$C9H17Cl3:IS)
mutate(CorrectedArea = GC_qToF_CPsFoodResults3$C9H16Cl4/GC_qToF_CPsFoodResults3$IS)
?mutate
CorrectedArea <- mutate(GC_qToF_CPsFoodResults3, GC_qToF_CPsFoodResults3$C9H16Cl4/GC_qToF_CPsFoodResults3$IS)
View(CorrectedArea)
pattern <- "^C\\d+" # This pattern matches column names starting with "C" followed by numbers
GC_qToF_CPsFoodResults3 <- mutate_at(GC_qToF_CPsFoodResults3, vars(matches(pattern)), as.numeric) # Apply as.numeric() to columns matching the pattern
pattern <- "^C\\d+" # This pattern matches column names starting with "C" followed by numbers
GC_qToF_CPsFoodResults3 <- mutate_at(GC_qToF_CPsFoodResults3, vars(matches(pattern)), as.numeric) # Apply as.numeric() to columns matching the pattern
head(GC_qToF_CPsFoodResults3$C13H23Cl5)
str(GC_qToF_CPsFoodResults3$C13H23Cl5)
rm(list = ls())
library(readxl)
dataset <- read_excel(NULL)
library(readxl)
GC_qToF_CPsFoodResults <- read_excel("F:/OREBRO/CP analysis/Food project/Result/Skyline/GC_qToF_CPsFoodResults.xlsx")
View(GC_qToF_CPsFoodResults)
GC_qToF_CPsFoodResults3 <- GC_qToF_CPsFoodResults |>
filter(Quantitative == "YES") |>
pivot_wider(id_cols = `Replicate Name`,
names_from = Molecule, # name of the new column
values_from = Area,
values_fn = list)        #name of the values from PFBA:sum_21PFAS
pattern <- "^C\\d+" # This pattern matches column names starting with "C" followed by numbers
GC_qToF_CPsFoodResults3 <- mutate_at(GC_qToF_CPsFoodResults3, vars(matches(pattern)), as.numeric) # Apply as.numeric() to columns matching the pattern
head(GC_qToF_CPsFoodResults3$C13H23Cl5)
str(GC_qToF_CPsFoodResults3$C13H23Cl5)
rm(list = ls())
library(readxl)
GC_qToF_CPsFoodResults <- read_excel("F:/OREBRO/CP analysis/Food project/Result/Skyline/GC_qToF_CPsFoodResults.xlsx")
View(GC_qToF_CPsFoodResults)
GC_qToF_CPsFoodResults3 <- GC_qToF_CPsFoodResults |>
filter(Quantitative == "YES") |>
pivot_wider(id_cols = `Replicate Name`,
names_from = Molecule, # name of the new column
values_from = Area,
values_fn = list)        #name of the values from PFBA:sum_21PFAS
pattern <- "^C\\d+" # This pattern matches column names starting with "C" followed by numbers
GC_qToF_CPsFoodResults3 <- mutate_at(GC_qToF_CPsFoodResults3, vars(matches(pattern)), as.numeric) # Apply as.numeric() to columns matching the pattern
GC_qToF_CPsFoodResults3$IS = as.numeric(GC_qToF_CPsFoodResults3$IS)
View(GC_qToF_CPsFoodResults3)
CorrectedArea <- mutate(GC_qToF_CPsFoodResults3, GC_qToF_CPsFoodResults3$C9H16Cl4/GC_qToF_CPsFoodResults3$IS)
print(CorrectedArea)
View(CorrectedArea)
CorrectedArea <- mutate_at(GC_qToF_CPsFoodResults3, vars(matches(pattern)),
~ . / GC_qToF_CPsFoodResults3$IS)
print(CorrectedArea)
View(CorrectedArea)
GC_qToF_CPsFoodResults2 <- GC_qToF_CPsFoodResults |>  #Wide the data so each sample is in one row
filter(Quantitative == "YES") |>
pivot_wider(id_cols = `Replicate Name`,
names_from = Molecule, # name of the new column
values_from = Area, #name of the values for the new columns
values_fn = list) #data type
pattern <- "^C\\d+" # This pattern matches column names starting with "C" followed by numbers
GC_qToF_CPsFoodResults3 <- mutate_at(GC_qToF_CPsFoodResults3, vars(matches(pattern)), as.numeric) # Apply as.numeric() to columns matching the pattern
GC_qToF_CPsFoodResults3$IS = as.numeric(GC_qToF_CPsFoodResults3$IS)# Define the IS as numeric
CorrectedArea <- mutate_at(GC_qToF_CPsFoodResults3, vars(matches(pattern)),
~ . / GC_qToF_CPsFoodResults3$IS) #It will now do it for all the columns that have the pattern (start the name with "C")
GC_qToF_CPsFoodResults3 <- GC_qToF_CPsFoodResults |>  #Wide the data so each sample is in one row
filter(Quantitative == "YES") |>
pivot_wider(id_cols = `Replicate Name`,
names_from = Molecule, # name of the new column
values_from = Area, #name of the values for the new columns
values_fn = list) #data type
pattern <- "^C\\d+" # This pattern matches column names starting with "C" followed by numbers
GC_qToF_CPsFoodResults3 <- mutate_at(GC_qToF_CPsFoodResults3, vars(matches(pattern)), as.numeric) # Apply as.numeric() to columns matching the pattern
GC_qToF_CPsFoodResults3$IS = as.numeric(GC_qToF_CPsFoodResults3$IS)# Define the IS as numeric
CorrectedArea <- mutate_at(GC_qToF_CPsFoodResults3, vars(matches(pattern)),
~ . / GC_qToF_CPsFoodResults3$IS) #It will now do it for all the columns that have the pattern (start the name with "C")
GC_qToF_CPsFoodResults3$RS = as.numeric(GC_qToF_CPsFoodResults3$RS)# Define the RS as numeric
rm(list = ls()) #Clean the environment
library(readxl)
GC_qToF_CPsFoodResults <- read_excel("F:/OREBRO/CP analysis/Food project/Result/Skyline/GC_qToF_CPsFoodResults.xlsx")
View(GC_qToF_CPsFoodResults)
GC_qToF_CPsFoodResults3 <- GC_qToF_CPsFoodResults |>  #Wide the data so each sample is in one row
filter(Quantitative == "YES") |>
pivot_wider(id_cols = `Replicate Name`,
names_from = Molecule, # name of the new column
values_from = Area, #name of the values for the new columns
values_fn = list) #data type
pattern <- "^C\\d+" # This pattern matches column names starting with "C" followed by numbers
GC_qToF_CPsFoodResults3 <- mutate_at(GC_qToF_CPsFoodResults3, vars(matches(pattern)), as.numeric) # Apply as.numeric() to columns matching the pattern
GC_qToF_CPsFoodResults3$IS = as.numeric(GC_qToF_CPsFoodResults3$IS)# Define the IS as numeric
CorrectedArea <- mutate_at(GC_qToF_CPsFoodResults3, vars(matches(pattern)),
~ . / GC_qToF_CPsFoodResults3$IS) #It will now do it for all the columns that have the pattern (start the name with "C")
GC_qToF_CPsFoodResults3$RS = as.numeric(GC_qToF_CPsFoodResults3$RS)# Define the RS as numeric
CorrectedArea <- mutate_at(GC_qToF_CPsFoodResults3, GC_qToF_CPsFoodResults3$RS / GC_qToF_CPsFoodResults3$IS) #It will now do it for all the columns that have the pattern (start the name with "C")
Recovery <- mutate(GC_qToF_CPsFoodResults3, GC_qToF_CPsFoodResults3$RS / GC_qToF_CPsFoodResults3$IS) #It will now do it for all the columns that have the pattern (start the name with "C")
View(Recovery)
Recovery <- mutate(GC_qToF_CPsFoodResults3, GC_qToF_CPsFoodResults3$IS / GC_qToF_CPsFoodResults3$RS) #It will now do it for all the columns that have the pattern (start the name with "C")
View(GC_qToF_CPsFoodResults3)
Recovery <- mutate(GC_qToF_CPsFoodResults3, GC_qToF_CPsFoodResults3$Recovery*100)
Recovery <- mutate(Recovery, NewColumn2 = Recovery$Recovery * 100)
Recovery <- mutate_at(Recovery, vars(matches(pattern)),
~ . *100)
View(Recovery)
Recovery <- mutate(GC_qToF_CPsFoodResults3, GC_qToF_CPsFoodResults3$IS / GC_qToF_CPsFoodResults3$RS) #Dividing the IS by RS
RecoveryPercentage <- mutate_at(Recovery, vars(matches(pattern)),
~ . *100)
library(readxl)
dataset <- read_excel(NULL)
library(readxl)
GC_qToF_CPsFoodResults <- read_excel("F:/OREBRO/CP analysis/Food project/Result/Skyline/GC_qToF_CPsFoodResults.xlsx")
View(GC_qToF_CPsFoodResults)
#Load the libraries
library(dplyr)
library(tidyr)
View(GC_qToF_CPsFoodResults)
#Wide the data so each sample is in one row
GC_qToF_CPsFoodResults3 <- GC_qToF_CPsFoodResults |>
filter(Quantitative == "YES") |>
pivot_wider(id_cols = `Replicate Name`,
names_from = Molecule, # name of the new column
values_from = Area, #name of the values for the new columns
values_fn = list) #data type
View(GC_qToF_CPsFoodResults3)
View(GC_qToF_CPsFoodResults)
#Wide the data so each sample is in one row
GC_qToF_CPsFoodResults3 <- GC_qToF_CPsFoodResults |>
filter(Quantitative == "YES") |>
pivot_wider(id_cols = `Replicate Name`,
names_from = Molecule, # name of the new column
values_from = Area, #name of the values for the new columns
) #data type
#Wide the data so each sample is in one row
GC_qToF_CPsFoodResults3 <- GC_qToF_CPsFoodResults |>
filter(Quantitative == "YES") |>
pivot_wider(id_cols = `Replicate Name`,
names_from = Molecule, # name of the new column
values_from = Area #name of the values for the new columns
) #data type
GC_qToF_CPsFoodResults3$IS = as.numeric(GC_qToF_CPsFoodResults3$IS)# Define the IS as numeric
#Divide the area of the homologues by the IS
CorrectedArea <- mutate_at(GC_qToF_CPsFoodResults3, vars(matches(pattern)),
~ . / GC_qToF_CPsFoodResults3$IS) #It will now do it for all the columns that have the pattern (start the name with "C")
View(CorrectedArea)
?mutate
#Dividing the IS by RS
Recovery <- mutate(GC_qToF_CPsFoodResults3, GC_qToF_CPsFoodResults3$IS / GC_qToF_CPsFoodResults3$RS)
View(Recovery)
?pivot_longer
pivot_longer(Recovery,
cols = 'Replicate Name':RS,
names_to = "Replicate Name", # name of the new column
)
#Load the libraries
library(dplyr)
library(tidyr)
#Dividing the IS by RS
Recovery <- mutate(GC_qToF_CPsFoodResults3, GC_qToF_CPsFoodResults3$IS / GC_qToF_CPsFoodResults3$RS)
View(Recovery)
library(reshape2) #needed library for transposing
#Response factor of each homologue per 1 ng/µL
#For having the same display as in the Excel sheet we first need to transpose our data frame:
installed.packages(reshape2)
#Load the libraries
library(dplyr)
library(tidyr)
t_CorrectedArea <- t(CorrectedArea)
View(t_CorrectedArea)
minC9Cl3<- min(t_CorrectedArea["C9H17Cl3", c(v8:v11)])
minC9Cl3<- min(t_CorrectedArea["C9H17Cl3", c(V8:V11)])
minC9Cl3
minC9Cl3<- min(t_CorrectedArea["C9H17Cl3", c('V8':'V11')])
minC9Cl3<- min(t_CorrectedArea["C9H17Cl3", c('V8', 'V9, 'V10', 'V11')])
minC9Cl3<- min(t_CorrectedArea["C9H17Cl3", c('V8', 'V9', 'V10', 'V11')])
minC9Cl3<- min(CorrectedArea[c('9_48_1', '9_48_2', '9_48_3', '9_48_4'), "C9H17Cl3"])
minC9Cl3
maxC9Cl3<- max(CorrectedArea[c('9_48_1', '9_48_2', '9_48_3', '9_48_4'), "C9H17Cl3"])
maxC9Cl3
View(CorrectedArea)
filtered_data <- CorrectedArea[complete.cases(CorrectedArea[c('9_48_1', '9_48_2', '9_48_3', '9_48_4'), "C9H17Cl3"]), ]
class(CoreectedArea)
class(CoreectedArea$C9H17Cl3)
class(CorrectedArea$C9H17Cl3)
filtered_data <- CorrectedArea[complete.cases(CorrectedArea[c('9_48_1', '9_48_2', '9_48_3', '9_48_4'), "C9H17Cl3"]), ]
?lm()
#x and y represent your independent and dependent variables, respectively.
x<- minC9Cl3
y<- maxC9Cl3
# Fit linear regression model
lm_model <- lm(y ~ x) #lm(y ~ x) fits a linear regression model of y on x.
# Extract the slope coefficient
slope <- round(coef(lm_model)[2], digits = 0) #coef(lm_model) retrieves the coefficients of the fitted model, and [2] selects the second coefficient, which corresponds to the slope.
library(readxl)
Test_ForR_csv <- read_excel("F:/LINKOPING/Manuscripts/Skyline/Skyline/Test_ForR.csv.xlsx")
View(Test_ForR_csv)
#Load the libraries
library(dplyr)
library(tidyr)
library(tidyverse)
View(Test_ForR_csv)
library(readxl)
TESTING <- read_excel("F:/LINKOPING/Manuscripts/Skyline/Skyline/TESTING.xlsx")
View(TESTING)
#Load the libraries
library(dplyr)
library(tidyr)
library(tidyverse)
library(readxl)
TESTING <- read_excel("F:/LINKOPING/Manuscripts/Skyline/Skyline/TESTING.xlsx")
View(TESTING)
TESTING |>
filter(Group != "Qual")
#Filter for the Quan
TESTING|> group_by(`Isotope Label Type`) |> tally() |> view()
TESTING|> group_by(`Isotope Label Type`) |> tally() |>
filter(Group != "Qual")
#Filter for the Quan
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, `Normalized Area`, `Analyte Concentration`) |> filter(`Isotope Label Type`== Quan)
#Filter for the Quan
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, `Normalized Area`, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan")
#Filter for the Quan
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, `Normalized Area`, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> filter(`Replicate Name` == "1_52_1", "1_52_2","1_52_3","1_52_4")|> filter(`Molecule` == "C11H19Cl5")
#Filter for the Quan
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, `Normalized Area`, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> filter(`Replicate Name` == c("1_52_1", "1_52_2","1_52_3","1_52_4")|> filter(`Molecule` == "C11H19Cl5")
#Filter for the Quan
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, `Normalized Area`, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> filter(`Replicate Name` == c("1_52_1", "1_52_2","1_52_3","1_52_4"))|> filter(`Molecule` == "C11H19Cl5")
#Filter for the Quan
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, `Normalized Area`, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> filter(`Molecule` == "C11H19Cl5")
#Filter for the Quan
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, `Normalized Area`, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> filter(`Molecule` == "C11H19Cl5")|>
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all sum of PFAS using the argument: negate=TRUE
ggplot(aes(x = `Analyte Concentration`, y = `Normalized Area`)) +
geom_point() +
geom_boxplot() +
theme_classic() +
ylab("Normalized Area")
#Slect the columns that we need
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, `Normalized Area`, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = `Normalized Area`)) + #Plot the scater plot
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_classic() +
ylab("Normalized Area")
#Slect the columns that we need
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, Area, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = Area)) + #Plot the scater plot
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area")
ggplot(
data = Statistics_Kumla_20200408,
mapping = aes(x = PFOA, y = PFBA)
) +
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_test()
#Slect the columns that we need
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, Area, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = Area)) + #Plot the scater plot
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area")
#Slect the columns that we need
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, Area, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = Area)) + #Plot the scater plot
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = TRUE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area")
#Slect the columns that we need
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, Area, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = Area)) + #Plot the scater plot
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area")
#Slect the columns that we need
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, Area, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = Area)) + #Plot the scater plot
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_test() +
ylab("Area")
theme_classic()
#Slect the columns that we need
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, Area, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = Area)) + #Plot the scater plot
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area")
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2)
#Slect the columns that we need
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, Area, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = Area)) + #Plot the scater plot
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area")
#Slect the columns that we need
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, Area, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = Area)) + #Plot the scater plot
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "black",
size = 2) +
theme_classic() +
ylab("Area")
#Slect the columns that we need
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, Area, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = Area)) + #Plot the scater plot
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area")
#Slect the columns that we need
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, Area, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = Area)) + #Plot the scater plot
geom_point() +
geom_smooth(method = "loess", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area")
#Slect the columns that we need
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, Area, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = Area)) + #Plot the scater plot
geom_point() +
geom_smooth(method = "loess", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area")
#Load the libraries
library(dplyr)
library(tidyr)
library(tidyverse)
#Slect the columns that we need
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, Area, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = Area)) + #Plot the scater plot
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area")
#Slect the columns that we need
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, Area, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = Area)) + #Plot the scater plot
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
linewidth = 2) +
theme_classic() +
ylab("Area")
#Slect the columns that we need
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, Area, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = Area)) + #Plot the scater plot
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
linewidth = 20) +
theme_classic() +
ylab("Area")
size
#Slect the columns that we need
TESTING |>  select(`Replicate Name`, Molecule, `Isotope Label Type`, Area, `Analyte Concentration`) |> filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = Area)) + #Plot the scater plot
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area")

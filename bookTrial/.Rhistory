create_molecule_name <- function(i, j) {
molecule_name <- paste0("C", i, "H", (2*i)+2-j, "Cl", j)
return(molecule_name)
}
# Create an empty list to store plots
plots <- list()
# Create an empty list to store regression results
regression_results <- list()
# Define the range of i and j
i_values <- 11 #in my data frame I only have the standard for C11, but otherwise it should be 9:30
j_values <- 3:11
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Create molecule name
molecule_name <- create_molecule_name(i, j)
# Filter data for the current molecule
filtered_data <- TESTING %>%
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name) %>%
filter(!str_detect(`Replicate Name`, "11_57_"))
# Create plot for the current molecule
plot <- ggplot(filtered_data, aes(x = `Analyte Concentration`, y = Area)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area") +
ggtitle(paste("Molecule:", molecule_name))
# Store the plot in the list
plots[[paste("Molecule", molecule_name)]] <- plot
}
}
# Print the plots
plots
View(plots)
View(plot)
# Create an empty list to store regression results
regression_results <- list()
# Define the range of i and j
i_values <- 1:5
# Define the range of i and j
i_values <- 11
j_values <- 3:11
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Create molecule name
molecule_name <- paste0("C", i, "H", (2*i)+2-j, "Cl", j)
# Filter data for the current molecule
filtered_data <- TESTING %>%
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name) %>%
filter(!str_detect(`Replicate Name`, "11_57_"))
# Perform linear regression
lm_model <- lm(Area ~ `Analyte Concentration`, data = filtered_data)
# Tidy up the regression results
regression_result <- tidy(lm_model)
# Add molecule name as a column
regression_result$Molecule <- molecule_name
# Store the regression results in the list
regression_results[[paste("Molecule", molecule_name)]] <- regression_result
}
}
# Check if there's only one level for Molecule
if(length(unique(regression_results_df$Molecule)) == 1) {
print("Only one level for Molecule. Unable to combine results.")
} else {
# Convert Molecule column to factor
regression_results_df$Molecule <- as.factor(regression_results_df$Molecule)
# Print the combined regression results
print(regression_results_df)
}
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Create molecule name
molecule_name <- paste0("C", i, "H", (2*i)+2-j, "Cl", j)
# Print molecule name for debugging
print(molecule_name)
# Filter data for the current molecule
filtered_data <- TESTING %>%
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name) %>%
filter(!str_detect(`Replicate Name`, "11_57_"))
# Perform linear regression
lm_model <- lm(Area ~ `Analyte Concentration`, data = filtered_data)
# Tidy up the regression results
regression_result <- tidy(lm_model)
# Add molecule name as a column
regression_result$Molecule <- molecule_name
# Store the regression results in the list
regression_results[[paste("Molecule", molecule_name)]] <- regression_result
}
}
# Create a function to perform linear regression and store results
perform_regression <- function(i, j) {
# Create molecule name
molecule_name <- paste0("C", i, "H", (2*i)+2-j, "Cl", j)
# Filter data for the current molecule
filtered_data <- TESTING %>%
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name) %>%
filter(!str_detect(`Replicate Name`, "11_57_"))
# Perform linear regression
lm_model <- lm(Area ~ `Analyte Concentration`, data = filtered_data)
# Return results
return(list(Molecule = molecule_name, Regression_Result = lm_model))
}
# Create an empty list to store regression results
regression_results <- list()
# Define the range of i and j
i_values <- 1:5
# Define the range of i and j
i_values <- 11
j_values <- 3:11
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Perform linear regression for the current combination of i and j
regression_results[[paste("Molecule", i, j)]] <- perform_regression(i, j)
}
}
# Create an empty list to store regression results
regression_results <- list()
# Define the range of i and j
i_values <- 11
j_values <- 3:11
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Create molecule name
molecule_name <- paste0("C", i, "H", (2*i)+2-j, "Cl", j)
# Filter data for the current molecule
filtered_data <- TESTING %>%
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name) %>%
filter(!str_detect(`Replicate Name`, "11_57_"))
# Check if Molecule variable has more than one level
if (length(unique(filtered_data$Molecule)) > 1) {
# Perform linear regression
lm_model <- lm(Area ~ `Analyte Concentration`, data = filtered_data)
# Tidy up the regression results
regression_result <- tidy(lm_model)
# Add molecule name as a column
regression_result$Molecule <- molecule_name
# Store the regression results in the list
regression_results[[paste("Molecule", molecule_name)]] <- regression_result
} else {
# Skip regression analysis for single level Molecule
cat("Skipping regression analysis for", molecule_name, "due to insufficient variation.\n")
}
}
}
#Clean the environment
rm(list = ls())
TESTING<-read_excel("F:/LINKOPING/Manuscripts/Skyline/Skyline/TESTING.xlsx")
######Build the calibration curve for one PCA homologue
TESTING |>
select(`Replicate Name`, Molecule, `Isotope Label Type`, `Normalized Area`, `Analyte Concentration`) |>#Select the columns that we need
filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = `Normalized Area`)) + #Plot the scatter plot
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_classic() +
ylab("Normalized Area")
TESTING |>
select(`Replicate Name`, Molecule, `Isotope Label Type`, Area, `Analyte Concentration`) |> #Select the columns that we need
filter(`Isotope Label Type`== "Quan") |> #Filter for the Quan
filter(`Molecule` == "C11H19Cl5")|> #Filter for one PCA homologue
filter(str_detect(`Replicate Name`, "11_57_", negate = TRUE)) |> #remove all the other standards
ggplot(aes(x = `Analyte Concentration`, y = Area)) + #Plot the scatter plot
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area")
# Function to create molecule names
create_molecule_name <- function(i, j) {
molecule_name <- paste0("C", i, "H", (2*i)+2-j, "Cl", j)
return(molecule_name)
}
# Create an empty list to store plots
plots <- list()
# Create an empty list to store regression results
regression_results <- list()
# Define the range of i and j
i_values <- 11 #in my data frame I only have the standard for C11, but otherwise it should be 9:30
j_values <- 3:11
or (i in i_values) {
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Create molecule name
molecule_name <- create_molecule_name(i, j)
# Filter data for the current molecule
filtered_data <- TESTING |>
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name) %>%
filter(!str_detect(`Replicate Name`, "11_57_"))
# Create plot for the current molecule
plot <- ggplot(filtered_data, aes(x = `Analyte Concentration`, y = Area)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area") +
ggtitle(paste("Molecule:", molecule_name))
# Perform linear regression
lm_model <- lm(Area ~ `Analyte Concentration`, data = filtered_data)
# Tidy up the regression results
regression_result <- tidy(lm_model)
# Add molecule name as a column
regression_result$Molecule <- molecule_name
# Store the regression results in the list
regression_results[[paste("Molecule", molecule_name)]] <- regression_result
# Store the plot in the list
plots[[paste("Molecule", molecule_name)]] <- plot
}
}
View(plots)
# Store the plot in the list
plots[[paste("Molecule", molecule_name)]] <- plot
View(plot)
# Create an empty list to store plots
plots <- list()
# Function to create molecule names
create_molecule_name <- function(i, j) {
molecule_name <- paste0("C", i, "H", (2*i)+2-j, "Cl", j)
return(molecule_name)
}
# Create an empty list to store plots
plots <- list()
# Create an empty list to store regression results
regression_results <- list()
# Define the range of i and j
i_values <- 11 #in my data frame I only have the standard for C11, but otherwise it should be 9:30
j_values <- 7
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Create molecule name
molecule_name <- create_molecule_name(i, j)
# Filter data for the current molecule
filtered_data <- TESTING |>
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name) %>%
filter(!str_detect(`Replicate Name`, "11_57_"))
# Create plot for the current molecule
plot <- ggplot(filtered_data, aes(x = `Analyte Concentration`, y = Area)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area") +
ggtitle(paste("Molecule:", molecule_name))
# Store the plot in the list
plots[[paste("Molecule", molecule_name)]] <- plot
}
}
# Print the plots
plots
View(plots)
# Function to create molecule names
create_molecule_name <- function(i, j) {
molecule_name <- paste0("C", i, "H", (2*i)+2-j, "Cl", j)
return(molecule_name)
}
# Create an empty list to store plots
plots <- list()
# Create an empty list to store regression results
regression_results <- list()
# Define the range of i and j
i_values <- 11 #in my data frame I only have the standard for C11, but otherwise it should be 9:30
j_values <- 3:11
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Create molecule name
molecule_name <- create_molecule_name(i, j)
# Filter data for the current molecule
filtered_data <- TESTING |>
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name) %>%
filter(!str_detect(`Replicate Name`, "11_57_"))
# Create plot for the current molecule
plot <- ggplot(filtered_data, aes(x = `Analyte Concentration`, y = Area)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area") +
ggtitle(paste("Molecule:", molecule_name))
# Store the plot in the list
plots[[paste("Molecule", molecule_name)]] <- plot
}
}
# Print the plots
plots
#Clean the environment
rm(list = ls())
TESTING<-read_excel("F:/LINKOPING/Manuscripts/Skyline/Skyline/TESTING.xlsx")
# Function to create molecule names
create_molecule_name <- function(i, j) {
molecule_name <- paste0("C", i, "H", (2*i)+2-j, "Cl", j)
return(molecule_name)
}
# Create an empty list to store plots
plotsA <- list()
# Define the range of i and j
i_values <- 11 #in my data frame I only have the standard for C11, but otherwise it should be 9:30
j_values <- 3:11
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Create molecule name
molecule_name <- create_molecule_name(i, j)
# Filter data for the current molecule
filtered_data <- TESTING |>
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name) |>
filter(!str_detect(Note == A))
# Create plot for the current molecule
plotA <- ggplot(filtered_data, aes(x = `Analyte Concentration`, y = Area)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area") +
ggtitle(paste("Molecule:", molecule_name))
# Store the plot in the list
plotsA[[paste("Molecule", molecule_name)]] <- plotA
}
}
# Print the plots
plotsA
# Function to create molecule names
create_molecule_name <- function(i, j) {
molecule_name <- paste0("C", i, "H", (2*i)+2-j, "Cl", j)
return(molecule_name)
}
# Create an empty list to store plots
plotsA <- list()
# Define the range of i and j
i_values <- 11 #in my data frame I only have the standard for C11, but otherwise it should be 9:30
j_values <- 3:11
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Create molecule name
molecule_name <- create_molecule_name(i, j)
# Filter data for the current molecule
filtered_data <- TESTING |>
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name) |>
filter(Note == A)
# Create plot for the current molecule
plotA <- ggplot(filtered_data, aes(x = `Analyte Concentration`, y = Area)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area") +
ggtitle(paste("Molecule:", molecule_name))
# Store the plot in the list
plotsA[[paste("Molecule", molecule_name)]] <- plotA
}
}
# Print the plots
plotsA
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Create molecule name
molecule_name <- create_molecule_name(i, j)
# Filter data for the current molecule
filtered_data <- TESTING |>
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name) |>
filter(Note == A)
# Create plot for the current molecule
plotA <- ggplot(filtered_data, aes(x = `Analyte Concentration`, y = Area)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area") +
ggtitle(paste("Molecule:", molecule_name))
# Store the plot in the list
plots[[paste("Molecule", molecule_name)]] <- plotA
}
}
View(TESTING)
# Function to create molecule names
create_molecule_name <- function(i, j) {
molecule_name <- paste0("C", i, "H", (2*i)+2-j, "Cl", j)
return(molecule_name)
}
# Create an empty list to store plots
plotsA <- list()
# Define the range of i and j
i_values <- 11 #in my data frame I only have the standard for C11, but otherwise it should be 9:30
j_values <- 3:11
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Create molecule name
molecule_name <- create_molecule_name(i, j)
# Filter data for the current molecule
filtered_data <- TESTING |>
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name) |>
filter(Note == A)
# Create plot for the current molecule
plotA <- ggplot(filtered_data, aes(x = `Analyte Concentration`, y = Area)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area") +
ggtitle(paste("Molecule:", molecule_name))
# Store the plot in the list
plotsA[[paste("Molecule", molecule_name)]] <- plotA
}
}
# Filter data for the current molecule
filtered_data <- TESTING |>
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name, Note == A)
# Filter data for the current molecule
filtered_data <- TESTING |>
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name, Note == "A")
# Function to create molecule names
create_molecule_name <- function(i, j) {
molecule_name <- paste0("C", i, "H", (2*i)+2-j, "Cl", j)
return(molecule_name)
}
# Create an empty list to store plots
plotsA <- list()
# Define the range of i and j
i_values <- 11 #in my data frame I only have the standard for C11, but otherwise it should be 9:30
j_values <- 3:11
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Create molecule name
molecule_name <- create_molecule_name(i, j)
# Filter data for the current molecule
filtered_data <- TESTING |>
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name, Note == "A")
# Create plot for the current molecule
plotA <- ggplot(filtered_data, aes(x = `Analyte Concentration`, y = Area)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area") +
ggtitle(paste("Molecule:", molecule_name))
# Store the plot in the list
plotsA[[paste("Molecule", molecule_name)]] <- plotA
}
}
# Print the plots
plotsA
# Function to create molecule names
create_molecule_name <- function(i, j) {
molecule_name <- paste0("C", i, "H", (2*i)+2-j, "Cl", j)
return(molecule_name)
}
# Create an empty list to store plots
plotsB <- list()
# Create an empty list to store regression results
regression_results <- list()
# Define the range of i and j
i_values <- 11 #in my data frame I only have the standard for C11, but otherwise it should be 9:30
j_values <- 3:11
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Create molecule name
molecule_name <- create_molecule_name(i, j)
# Filter data for the current molecule
filtered_data <- TESTING |>
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name, Note == "B")
# Create plot for the current molecule
plotB <- ggplot(filtered_data, aes(x = `Analyte Concentration`, y = Area)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
colour = "orange",
size = 2) +
theme_classic() +
ylab("Area") +
ggtitle(paste("Molecule:", molecule_name))
# Store the plot in the list
plotsB[[paste("Molecule", molecule_name)]] <- plotB
}
}
# Print the plots
plotsB

```{r}
library(tidyverse)
ggplot(
data = Statistics_Kumla_20200408,
mapping = aes(x = ID, y = PFBA)
) +
geom_point()
```{r}
ggplot(
data = Statistics_Kumla_20200408,
mapping = aes(x = ID, y = PFBA, color = Group)
) +
geom_point()
ggplot(
data = Statistics_Kumla_20200408,
mapping = aes(x = ID, y = PFBA, color = Group)
) +
geom_point() +
geom_smooth(method = "lm")
ggplot(
data = Statistics_Kumla_20200408,
mapping = aes(x = ID, y = PFBA)
) +
geom_point(mapping = aes(color = Group, shape = Group_Family)) +
geom_smooth(method = "lm")
ggplot(data = Statistics_Kumla_20200408, mapping = aes(x = PFOA, y = PFBA)) +
geom_point(size = 2, colour = "black") + # add a scatter plot
geom_smooth(method = "lm", # uses the linear regression model
se = TRUE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
geom_smooth(method = "loess",
se = TRUE,
colour = "green",
size = 2)
ggplot(data = Statistics_Kumla_20200408, mapping = aes(x = PFOA, y = PFOS)) +
geom_point(size = 2, colour = "black") + # add a scatter plot
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
geom_smooth(method = "loess",
se = FALSE,
colour = "green",
size = 2)
ggplot(data = Statistics_Kumla_20200408) +
geom_point(mapping = aes(x = PFOA, y = PFBA, size = PFOS), colour = "black")
ggplot(data = Statistics_Kumla_20200408) +
geom_point(mapping = aes(x = PFOA, y = PFBA, size = PFOS), colour = "black") +
scale_size_continuous(
name = "PFOS Description",
breaks = c(10, 50, 100, 500, 1000),  # Adjust the breaks to include more values
labels = c("10", "50", "100", "500", "1000")  # Adjust labels accordingly
)
ggplot(data = Statistics_Kumla_20200408) +
geom_point(mapping = aes(x = PFOA, y = PFBA, size = PFOS), colour = "black") +
scale_size_continuous(
name = "PFOS Description",
breaks = c(10, 50, 100, 500, 1000),  # Adjust the breaks to include more values
labels = c("10", "50", "100", "500", "1000")  # Adjust labels accordingly
) +
geom_smooth(mapping = aes(x = PFOA, y = PFOS),
method = "lm",
se = FALSE,
colour = "orange",
size = 2) +
geom_smooth(mapping = aes(x = PFOA, y = PFOS),
method = "loess",
se = FALSE,
colour = "green",
size = 2) +
geom_point(mapping = aes(x = PFOA, y = PFBS, # new mapping
size = PFBS), # size of points according to PFBS values
colour = "purple") + # colour outside of mappings
theme_classic() # This theme will remove the background colours and lines
PFAS_insects_long <- Statistics_Kumla_20200408 %>% # shortcut for pipe Ctrl + shift + M
pivot_longer(cols = PFBA:PFOA, # select all columns from PFBA to sum_21PFAS
names_to = "somePFAS", # name of the new column
values_to = "Conc") %>%  #name of the values from PFBA:sum_21PFAS
mutate(somePFAS = as.factor(somePFAS)) #make PFAS column a factor variable
#check the PFAS group names
PFAS_insects_long |> group_by(somePFAS) |> tally() |> view()
ggplot(data = PFAS_insects_long, aes(x = somePFAS, y = Conc)) +
geom_point(mapping = aes(color = ifelse(as.numeric(somePFAS) > 0.007, "orange", "black"))) +
geom_boxplot() +
scale_color_identity() +  # Use scale_color_identity to override the default color mapping
theme_classic() +
ylab("Concentration of PFAS (ng/g) in solid samples")
ggplot(data = PFAS_insects_long, aes(x = somePFAS, y = Conc)) +
geom_point(mapping = aes(color = ifelse(as.numeric(somePFAS) < 0.007, "orange", "black"))) +
geom_boxplot() +
scale_color_identity() +  # Use scale_color_identity to override the default color mapping
theme_classic() +
ylab("Concentration of PFAS (ng/g) in solid samples")
?ifelse
ggplot(
data = Statistics_Kumla_20200408,
mapping = aes(x = PFBA, y = PFOS)
) +
geom_point()
plot(x = Statistics_Kumla_20200408$PFBA, y = Statistics_Kumla_20200408$PFOS, main = "PFBA vs PFOS concentrations",
xlab = "PFBA concentrations (ng/L)",
ylab = "PFOS concentrations (ng/L",
pch = 19) # choosing symbol for points in a graph (see ?pch for number/symbol)
plot(x = Statistics_Kumla_20200408$PFBA, y = Statistics_Kumla_20200408$PFOS, main = "PFBA vs PFOS concentrations",
xlab = "PFBA concentrations (ng/L)",
ylab = "PFOS concentrations (ng/L",
pch = 19) # choosing symbol for points in a graph (see ?pch for number/symbol)
# We can add a regression line into the same graph
abline(lm(Statistics_Kumla_20200408$PFBA ~ Statistics_Kumla_20200408$PFOS, data = Statistics_Kumla_20200408), col = "orange", lwd = 3) # lwd is the line width
# We can add a regression line into the same graph
abline(lm(Statistics_Kumla_20200408$PFBA ~ Statistics_Kumla_20200408$PFBA, data = Statistics_Kumla_20200408), col = "orange", lwd = 3) # lwd is the line width
plot(x = Statistics_Kumla_20200408$PFBA, y = Statistics_Kumla_20200408$PFOS, main = "PFBA vs PFOS concentrations",
xlab = "PFBA concentrations (ng/L)",
ylab = "PFOS concentrations (ng/L",
pch = 19) # choosing symbol for points in a graph (see ?pch for number/symbol)
# We can add a regression line into the same graph
abline(lm(Statistics_Kumla_20200408$PFBA ~ Statistics_Kumla_20200408$PFOS, data = Statistics_Kumla_20200408), col = "orange", lwd = 3) # lwd is the line width
# as well as a loess fit
lines(lowess(Statistics_Kumla_20200408$PFBA, Statistics_Kumla_20200408$PFOS), col = "green", lwd = 3)
plot(x = Statistics_Kumla_20200408$PFBA, y = Statistics_Kumla_20200408$PFOS, main = "PFBA vs PFOS concentrations",
xlab = "PFBA concentrations (ng/L)",
ylab = "PFOS concentrations (ng/L",
pch = 19) # choosing symbol for points in a graph (see ?pch for number/symbol)
# We can add a regression line into the same graph
abline(lm(PFAS_insects$PFOS ~ PFAS_insects$PFOA, data = PFAS_insects), col = "blue", lwd = 3) # lwd is the line width
# We can add a regression line into the same graph
abline(lm( Statistics_Kumla_20200408$PFOS ~  Statistics_Kumla_20200408$PFOA, data =  Statistics_Kumla_20200408), col = "blue", lwd = 3) # lwd is the line width
plot(x = PFAS_insects$PFOA, y = PFAS_insects$PFOS, main = "PFOA vs PFOS concentrations",
xlab = "PFOA concentrations (ng/L)",
ylab = "PFOS concentrations (ng/L",
pch = 19) # choosing symbol for points in a graph (see ?pch for number/symbol)
plot(x = Statistics_Kumla_20200408$PFOA, y = Statistics_Kumla_20200408$PFBA, main = "PFBA vs PFOS concentrations",
xlab = "PFOA concentrations (ng/L)",
ylab = "PFBA concentrations (ng/L",
pch = 19) # choosing symbol for points in a graph (see ?pch for number/symbol)
# We can add a regression line into the same graph
abline(lm(Statistics_Kumla_20200408$PFBA ~ Statistics_Kumla_20200408$PFOS, data = Statistics_Kumla_20200408), col = "orange", lwd = 3) # lwd is the line width
plot(x = Statistics_Kumla_20200408$PFOA, y = Statistics_Kumla_20200408$PFBA, main = "PFBA vs PFOS concentrations",
xlab = "PFOA concentrations (ng/L)",
ylab = "PFBA concentrations (ng/L",
pch = 19) + # choosing symbol for points in a graph (see ?pch for number/symbol)
# We can add a regression line into the same graph
abline(lm(Statistics_Kumla_20200408$PFBA ~ Statistics_Kumla_20200408$PFOS, data = Statistics_Kumla_20200408), col = "orange", lwd = 3) # lwd is the line width
plot(x = Statistics_Kumla_20200408$PFOA, y = Statistics_Kumla_20200408$PFBA, main = "PFBA vs PFOS concentrations",
xlab = "PFOA concentrations (ng/L)",
ylab = "PFBA concentrations (ng/L",
pch = 19) + # choosing symbol for points in a graph (see ?pch for number/symbol)
# We can add a regression line into the same graph
abline(lm(Statistics_Kumla_20200408$PFBA ~ Statistics_Kumla_20200408$PFOS, data = Statistics_Kumla_20200408), col = "orange", lwd = 3) + # lwd is the line width
# as well as a loess fit
lines(lowess(Statistics_Kumla_20200408$PFBA, Statistics_Kumla_20200408$PFOS), col = "green", lwd = 3)
plot(x = Statistics_Kumla_20200408$PFOA, y = Statistics_Kumla_20200408$PFBA, main = "PFBA vs PFOS concentrations",
xlab = "PFOA concentrations (ng/L)",
ylab = "PFBA concentrations (ng/L",
pch = 19) + # choosing symbol for points in a graph (see ?pch for number/symbol)
# as well as a loess fit
lines(lowess(Statistics_Kumla_20200408$PFBA, Statistics_Kumla_20200408$PFOS), col = "green", lwd = 3)
plot(x = Statistics_Kumla_20200408$PFOA, y = Statistics_Kumla_20200408$PFBA, main = "PFBA vs PFOS concentrations",
xlab = "PFOA concentrations (ng/L)",
ylab = "PFBA concentrations (ng/L",
pch = 19) + # choosing symbol for points in a graph (see ?pch for number/symbol)
# as well as a loess fit
lines(lowess(Statistics_Kumla_20200408$PFBA, Statistics_Kumla_20200408$PFOA), col = "green", lwd = 3)
ggplot(
data = Statistics_Kumla_20200408,
mapping = aes(x = PFOA, y = PFBA, color = Group)
) +
geom_point() +
geom_smooth(method = "lm")
ggplot(
data = Statistics_Kumla_20200408,
mapping = aes(x = PFOA, y = PFBA)
) +
geom_point() +
geom_smooth(method = "lm")
ggplot(
data = Statistics_Kumla_20200408,
mapping = aes(x = ID, y = PFBA, color = Group)
) +
geom_point() +
geom_smooth(method = "loess")
ggplot(
data = Statistics_Kumla_20200408,
mapping = aes(x = PFOA, y = PFBA)
) +
geom_point() +
geom_smooth(method = "loess")
ggplot(
data = Statistics_Kumla_20200408,
mapping = aes(x = PFOA, y = PFBA)
) +
geom_point() +
geom_smooth(method = "loess",
se = FALSE,
colour = "green",
size = 2)
ggplot(
data = Statistics_Kumla_20200408,
mapping = aes(x = PFOA, y = PFBA)
) +
geom_point() +
geom_smooth(method = "loess",
se = FALSE,
colour = "green",
size = 2) +
theme_minimal()
ggplot(
data = Statistics_Kumla_20200408,
mapping = aes(x = PFOA, y = PFBA)
) +
geom_point() +
geom_smooth(method = "loess",
se = FALSE,
colour = "green",
size = 2) +
theme_void()
ggplot(
data = Statistics_Kumla_20200408,
mapping = aes(x = PFOA, y = PFBA)
) +
geom_point() +
geom_smooth(method = "loess",
se = FALSE,
colour = "green",
size = 2) +
theme_test()
ggplot(
data = Statistics_Kumla_20200408,
mapping = aes(x = PFOA, y = PFBA)
) +
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = TRUE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_test()
ggplot(
data = Statistics_Kumla_20200408,
mapping = aes(x = PFOA, y = PFBA)
) +
geom_point() +
geom_smooth(method = "lm", # uses the linear regression model
se = FALSE, # this will remove the confidence intervals
colour = "orange",
size = 2) +
theme_test()
plot(x = Statistics_Kumla_20200408$PFOA, y = Statistics_Kumla_20200408$PFBA, main = "PFBA vs PFOS concentrations",
xlab = "PFOA concentrations (ng/L)",
ylab = "PFBA concentrations (ng/L",
pch = 19) + # choosing symbol for points in a graph (see ?pch for number/symbol)
# We can add a regression line into the same graph
abline(lm(Statistics_Kumla_20200408$PFOA ~ Statistics_Kumla_20200408$PFBA, data = Statistics_Kumla_20200408), col = "orange", lwd = 3) # lwd is the line width
groupsPFOS <- tatistics_Kumla_20200408[, c("Group", "PFOS")] # subset two variables from the dataframe
groupsPFOS <- Statistics_Kumla_20200408[, c("Group", "PFOS")] # subset two variables from the dataframe
groupsPFOS$Group <- as.factor(groupsPFOS$Group)
barplot(height = Statistics_Kumla_20200408$PFOS)
# Box plot of one variable
boxplot(Statistics_Kumla_20200408$PFBS)
ggplot(data = PFAS_insects_long, aes(x = somePFAS, y = Conc)) +
geom_point(mapping = aes(color = ifelse(as.numeric(somePFAS) < 0.007, "orange", "black"))) +
geom_boxplot() +
#scale_color_identity() +  # Use scale_color_identity to override the default color mapping
theme_classic() +
ylab("Concentration of PFAS (ng/g) in solid samples")
ggplot(data = PFAS_insects_long, aes(x = somePFAS, y = Conc)) +
geom_point(mapping = aes(color = ifelse(as.numeric(somePFAS) < 0.007, "orange", "black"))) +
#geom_boxplot() +
#scale_color_identity() +  # Use scale_color_identity to override the default color mapping
theme_classic() +
ylab("Concentration of PFAS (ng/g) in solid samples")
ggplot(data = PFAS_insects_long, aes(x = somePFAS, y = Conc)) +
geom_point(color = ifelse(as.numeric(somePFAS) < 0.007, "orange", "black")) +
#geom_boxplot() +
#scale_color_identity() +  # Use scale_color_identity to override the default color mapping
theme_classic() +
ylab("Concentration of PFAS (ng/g) in solid samples")
PFAS_insects_long |> mutate(color = ifelse(as.numeric(somePFAS) > 0.007, "orange", "black"))
View(PFAS_insects_long)
PFAS_insects_long |> mutate(color = ifelse(Conc > 0.007, "orange", "black"))
ggplot(data = PFAS_insects_long, aes(x = somePFAS, y = Conc))
PFAS_insects_long |> mutate(color = ifelse(Conc > 0.007, "orange", "black")) |> view()
PFAS_insects_long |> mutate(color = ifelse(Conc > 200, "orange", "black")) |> view()
PFAS_insects_long |> mutate(color = ifelse(Conc > 50, "orange", "black")) |> view()
PFAS_insects_long |> mutate(color = ifelse(Conc > 50, "orange", "black")) |>
ggplot(aes(x = somePFAS, y = Conc)) +
geom_point(mapping = aes(color = color)) +
geom_boxplot() + #ifelse(test, yes, no)
scale_color_identity() +  # Use scale_color_identity to override the default color mapping
theme_classic() +
ylab("Concentration of PFAS (ng/g) in solid samples")
PFAS_insects_long |> mutate(Color = ifelse(Conc > 50, "orange", "black")) |>
ggplot(aes(x = somePFAS, y = Conc)) +
geom_point(mapping = aes(color = Color)) +
geom_boxplot() + #ifelse(test, yes, no)
scale_color_identity() +  # Use scale_color_identity to override the default color mapping
theme_classic() +
ylab("Concentration of PFAS (ng/g) in solid samples")
PFAS_insects_long |> mutate(Color = ifelse(Conc > 50, "orange", "black")) |>
ggplot(aes(x = somePFAS, y = Conc)) +
geom_point(color = Color) +
geom_boxplot() + #ifelse(test, yes, no)
scale_color_identity() +  # Use scale_color_identity to override the default color mapping
theme_classic() +
ylab("Concentration of PFAS (ng/g) in solid samples")
PFAS_insects_long |> mutate(Color = ifelse(Conc > 50, "orange", "black")) |>
ggplot(aes(x = somePFAS, y = Conc, color = Color)) +
geom_point() +
geom_boxplot() + #ifelse(test, yes, no)
scale_color_identity() +  # Use scale_color_identity to override the default color mapping
theme_classic() +
ylab("Concentration of PFAS (ng/g) in solid samples")
PFAS_insects_long |> mutate(Color = ifelse(Conc > 50, "orange", "black")) |>
ggplot(aes(x = somePFAS, y = Conc)) +
geom_point(aes (color = Color)) +
geom_boxplot() + #ifelse(test, yes, no)
scale_color_identity() +  # Use scale_color_identity to override the default color mapping
theme_classic() +
ylab("Concentration of PFAS (ng/g) in solid samples")
library(readxl)
GC_qToF_CPsFoodResults <- read_excel("F:/OREBRO/CP analysis/Food project/Result/Skyline/GC_qToF_CPsFoodResults.xlsx")
View(GC_qToF_CPsFoodResults)
library(dplyr)
IS <- GC_qToF_CPsFoodResults %>%
pivot_longer(cols = c(`Molecule List`, Area), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area") %>%  #name of the values from PFBA:sum_21PFAS
mutate(IS = `Molecule List`= ifelse(IS, `Molecule List`, NA)) #make PFAS column a factor variable
IS <- GC_qToF_CPsFoodResults %>%
pivot_longer(cols = c(`Molecule List`, Area), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area") %>%  #name the values
mutate(IS = `Molecule List`= ifelse(IS, `Molecule List`, NA)) #make the new column witth only the IS
IS <- GC_qToF_CPsFoodResults %>%
pivot_longer(cols = c(`Molecule List`, Area), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area") %>%  #name the values
mutate(IS = `Molecule List`= ifelse(IS)) #make the new column witth only the IS
IS <- GC_qToF_CPsFoodResults %>%
pivot_longer(cols = c(`Molecule List`, Area), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area") %>%  #name the values
mutate(IS = ifelse(`Molecule List` == "IS", `Molecule List`, NA)) #make the new column witth only the IS
IS <- GC_qToF_CPsFoodResults %>%
pivot_longer(cols = c(`Molecule List`, Area), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area") %>%  #name the values
mutate(IS = ifelse(`Molecule List` == "IS", `Molecule List`, NA)) #make the new column with only the IS
library(dplyr)
library(tidyr)
GC_qToF_CPsFoodResults <- GC_qToF_CPsFoodResults %>%
pivot_longer(cols = c(`Molecule List`, Area),
names_to = "IS",
values_to = "Area") %>%
mutate(IS = ifelse(`Molecule List` == "IS", `Molecule List`, NA))
GC_qToF_CPsFoodResults <- GC_qToF_CPsFoodResults %>%
pivot_longer(cols = `Molecule List`,
names_to = "IS",
values_to = "Area") %>%
mutate(IS = ifelse(`Molecule List` == "IS", `Molecule List`, NA))
GC_qToF_CPsFoodResults <- GC_qToF_CPsFoodResults %>%
pivot_longer(cols = `Molecule List`,
names_to = c(".value", "IS"),
names_sep = "_",
values_to = "Area") %>%
mutate(IS = ifelse(`Molecule List` == "IS", `Molecule List`, NA))
GC_qToF_CPsFoodResults <- GC_qToF_CPsFoodResults %>%
pivot_longer(cols = `Molecule List`,
names_to = "IS",
values_to = "Molecule") %>%
mutate(Area = ifelse(IS == "IS", Molecule, NA))
GC_qToF_CPsFoodResults <- GC_qToF_CPsFoodResults %>%
mutate(Area = ifelse(`Molecule List` == "IS", Area, NA))
GC_qToF_CPsFoodResults <- GC_qToF_CPsFoodResults %>%
mutate(Area = case_when(`Molecule List` == "IS" ~ Area,
TRUE ~ NA_real_))
rm(list = ls())
library(readxl)
GC_qToF_CPsFoodResults <- read_excel("F:/OREBRO/CP analysis/Food project/Result/Skyline/GC_qToF_CPsFoodResults.xlsx")
View(GC_qToF_CPsFoodResults)
GC_qToF_CPsFoodResults2 <- GC_qToF_CPsFoodResults %>% # shortcut for pipe Ctrl + shift + M
pivot_longer(cols = c(Replicate, `Molecule List`, Area), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area") %>%  #name of the values from PFBA:sum_21PFAS
mutate(somePFAS = as.factor(somePFAS)) #make PFAS column a factor variable
GC_qToF_CPsFoodResults2 <- GC_qToF_CPsFoodResults %>% # shortcut for pipe Ctrl + shift + M
pivot_longer(cols = c(Replicate, `Molecule List`, Area), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area")
GC_qToF_CPsFoodResults2 <- GC_qToF_CPsFoodResults %>% # shortcut for pipe Ctrl + shift + M
pivot_longer(cols = c(`Replicate Name`, `Molecule List`, Area), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area")
```{r}
GC_qToF_CPsFoodResults2 <- GC_qToF_CPsFoodResults %>%
select(where(is.numeric)) %>%  # Select only numeric columns
pivot_longer(cols = -c(Replicate, `Molecule List`, Area),  # Exclude non-numeric columns from pivoting
names_to = "IS",
values_to = "Area")
GC_qToF_CPsFoodResults2 <- GC_qToF_CPsFoodResults %>%
select(where(is.numeric)) %>%  # Select only numeric columns
pivot_longer(cols = -c(`Replicate Name`, `Molecule List`, Area),  # Exclude non-numeric columns from pivoting
names_to = "IS",
values_to = Area)
GC_qToF_CPsFoodResults2 <- GC_qToF_CPsFoodResults %>%
select(where(is.numeric)) %>%  # Select only numeric columns
pivot_longer(cols = -c(`Molecule List`, Area),  # Exclude non-numeric and specific columns from pivoting
names_to = "IS",
values_to = "Area")
GC_qToF_CPsFoodResults2 <- GC_qToF_CPsFoodResults %>% # shortcut for pipe Ctrl + shift + M
pivot_longer(cols = c(`Replicate Name`, `Molecule List`, Area), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area")%>%  #name of the values from PFBA:sum_21PFAS
mutate(IS = as.factor(ifelse(`Molecule List` == "IS"))) #make PFAS column a factor variable
GC_qToF_CPsFoodResults2 <- GC_qToF_CPsFoodResults %>% # shortcut for pipe Ctrl + shift + M
pivot_longer(cols = c(`Replicate Name`, `Molecule List`, Area), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area")%>%  #name of the values from PFBA:sum_21PFAS
mutate(IS = as.factor(ifelse(`Molecule List` == "IS"))) #make PFAS column a factor variable
GC_qToF_CPsFoodResults2 <- GC_qToF_CPsFoodResults %>%
pivot_longer(cols = -c(`Molecule List`),  # Exclude `Molecule List` column from pivoting
names_to = "IS",
values_to = "Area") %>%
mutate(IS = ifelse(`Molecule List` == "IS", as.factor(`Molecule List`), NA))
GC_qToF_CPsFoodResults2 <- GC_qToF_CPsFoodResults %>%
pivot_longer(cols = c(`Molecule List`:Area),  # Exclude `Molecule List` column from pivoting
names_to = "IS",
values_to = "Area") %>%
mutate(IS = ifelse(`Molecule List` == "IS", as.factor(`Molecule List`), NA))
GC_qToF_CPsFoodResults2 <- GC_qToF_CPsFoodResults %>%
pivot_longer(cols = c(`Molecule List`:Area),  # Exclude `Molecule List` column from pivoting
names_to = "IS",
values_to = "Area") %>%
mutate(IS = ifelse(`Molecule List` == "IS", as.factor(`Molecule List`), NA))
GC_qToF_CPsFoodResults2 <- GC_qToF_CPsFoodResults %>%
pivot_longer(cols = c(`Molecule List`,Area),  # Exclude `Molecule List` column from pivoting
names_to = "IS",
values_to = "Area") %>%
mutate(IS = ifelse(`Molecule List` == "IS", as.factor(`Molecule List`), NA))
#check the PFAS group names
GC_qToF_CPsFoodResults |> group_by(IS) |> view()
#check the PFAS group names
GC_qToF_CPsFoodResults |> ifelse(`Molecule List` == "IS") |> view()
#check the PFAS group names
GC_qToF_CPsFoodResults |> `Molecule List` |> tally() |> view()
#check the PFAS group names
GC_qToF_CPsFoodResults |> group_by(`Molecule List`) |> tally() |> view()
#check the PFAS group names
GC_qToF_CPsFoodResults |> group_by(`Molecule List`) |> tally()
#check the PFAS group names
IS <-GC_qToF_CPsFoodResults |> group_by(`Molecule List`) |> tally() |>
filter(`Molecule List` == "IS") |> #remove all water samples to only include solid samples
pivot_longer(cols = c(IS), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area")
#check the PFAS group names
IS <-GC_qToF_CPsFoodResults |> group_by(`Molecule List`) |> tally() |>
filter(`Molecule List` == "IS")  #remove all water samples to only include solid samples
#check the PFAS group names
IS <-GC_qToF_CPsFoodResults |> group_by(`Molecule List`) |> tally() |> filter(`Molecule List` == "IS")  #Slect only the IS
pivot_longer(cols = c(IS), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area")
pivot_longer(cols = c(IS), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area")
class(IS)
#check the PFAS group names
IS <-GC_qToF_CPsFoodResults |> group_by(`Molecule List`) |> tally() |> filter(`Molecule List` == "IS") |>  #Slect only the IS
pivot_longer(cols = c(IS), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area")
#check the PFAS group names
IS <-GC_qToF_CPsFoodResults |> group_by(`Molecule List`) |> tally() |> filter(`Molecule List` == "IS")  #Slect only the IS
#check the PFAS group names
IS <-GC_qToF_CPsFoodResults |> group_by(`Molecule List`) |> tally() |> filter(`Molecule List` == "IS")  #Slect only the IS
IS <- IS %>%
pivot_longer(cols = c(IS), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area")
IS <- IS %>%
pivot_longer(cols = c(IS:Area), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area")
library(dplyr)
library(tidyr)
GC_qToF_CPsFoodResults <- GC_qToF_CPsFoodResults %>%
mutate(Area = case_when(`Molecule List` == "IS" ~ Area,
TRUE ~ NA_real_))
rm(list = ls())
library(dplyr)
IS <- GC_qToF_CPsFoodResults %>%
pivot_longer(cols = c(`Molecule List`, Area), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area") %>%  #name the values
mutate(IS = ifelse(`Molecule List` == "IS", `Molecule List`, NA)) #make the new column with only the IS
GC_qToF_CPsFoodResults <- GC_qToF_CPsFoodResults %>%
mutate(Area = case_when(`Molecule List` == "IS" ~ Area,
TRUE ~ NA_real_))
library(readxl)
GC_qToF_CPsFoodResults <- read_excel("F:/OREBRO/CP analysis/Food project/Result/Skyline/GC_qToF_CPsFoodResults.xlsx")
View(GC_qToF_CPsFoodResults)
GC_qToF_CPsFoodResults |>
group_by(`Replicate Name`, `Molecule List`) |>
tally()
#check the PFAS group names
IS <-GC_qToF_CPsFoodResults |> group_by(`Molecule List`) |> tally() |> filter(`Molecule List` == "IS")  #Slect only the IS
View(IS)
IS <- GC_qToF_CPsFoodResults %>%
pivot_longer(cols = c(`Molecule List`, Area), # select all columns from PFBA to sum_21PFAS
names_to = "IS", # name of the new column
values_to = "Area")   #name the values

slopeB <- coef(lm_modelB)[2]
interceptB <- coef(lm_modelB)[1]
# Calculate R-squared
R_squaredB <- summary(lm_modelB)$r.squared
# Determine the type based on the value of i
if (i >= 10 && i <= 13) {
type <- "SCCPs"
} else if (i >= 14 && i <= 17) {
type <- "MCCPs"
} else if (i >= 18 && i <= 30) {
type <- "LCCPs"
} else {
type <- "Unknown"
}
# Fill the data frame
calibration_resultsB <- rbind(calibration_resultsB,
data.frame(STD_code = paste("B-", type),
Reference_standard = paste(type, "C", i, "Cl%", "57"),
Chain_length = paste("C",i),
Type = type,
Homologue = molecule_name,
Response_factor = round(slopeB),
Intercept = interceptB,
R_squared = R_squaredB))
# Create plot for the current molecule
plotB <- ggplot(filtered_dataB, aes(x = `Analyte Concentration`, y = Area)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
colour = "purple",
size = 1) +
theme_classic() +
ylab("Area") +
ggtitle(paste("Molecule:", molecule_name))
# Store the plot in the list
plotsB[[paste("Molecule", molecule_name)]] <- plotB
}
}
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Create molecule name
molecule_name <- create_molecule_name(i, j)
# Filter data for the current molecule
filtered_dataB <- TESTING |>
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name, Note == "B")
# Check if there are any non-NA cases in the filtered data
if (sum(!is.na(filtered_dataB$Area)) == 0 || sum(!is.na(filtered_dataB$`Analyte Concentration`)) == 0) {
cat("No valid cases for fitting the model for molecule:", molecule_name, "\n")
} else {
# Fit linear model to the data
lm_modelB <- lm(Area ~ `Analyte Concentration`, data = filtered_dataB)
# Extract slope and intercept from the model
slopeB <- coef(lm_modelB)[2]
interceptB <- coef(lm_modelB)[1]
# Calculate R-squared
R_squaredB <- summary(lm_modelB)$r.squared
# Determine the type based on the value of i
if (i >= 10 && i <= 13) {
type <- "SCCPs"
} else if (i >= 14 && i <= 17) {
type <- "MCCPs"
} else if (i >= 18 && i <= 30) {
type <- "LCCPs"
} else {
type <- "Unknown"
}
# Fill the data frame
calibration_resultsB <- rbind(calibration_resultsB,
data.frame(STD_code = paste("B-", type),
Reference_standard = paste(type, "C", i, "Cl%", "57"),
Chain_length = paste("C",i),
Type = type,
Homologue = molecule_name,
Response_factor = round(slopeB),
Intercept = interceptB,
R_squared = R_squaredB))
# Create plot for the current molecule
plotB <- ggplot(filtered_dataB, aes(x = `Analyte Concentration`, y = Area)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
colour = "purple",
size = 1) +
theme_classic() +
ylab("Area") +
ggtitle(paste("Molecule:", molecule_name))
# Store the plot in the list
plotsB[[paste("Molecule", molecule_name)]] <- plotB
}
}
}
View(calibration_resultsB)
# Print the grid of calibration curves
calibration_curves_gridB
# Print the data frame with calibration results
print(calibration_resultsB)
# Arrange plots in a grid
calibration_curves_gridB <- plotsB[[1]]
for (i in 2:length(plotsB)) {
calibration_curves_gridB <- calibration_curves_gridB + plotsB[[i]]
}
# Print the grid of calibration curves
calibration_curves_gridB
# Print the data frame with calibration results
print(calibration_resultsA)
# Arrange plots in a grid
calibration_curves_gridA <- plotsA[[1]]
for (i in 2:length(plotsA)) {
calibration_curves_gridA <- calibration_curves_gridA + plotsA[[i]]
}
# Print the grid of calibration curves
calibration_curves_gridA
combined_df <- rbind(calibration_resultsA, calibration_resultsB)
View(combined_df)
View(filtered_dataB)
#Clean the environment
rm(list = ls())
TESTING<-read_excel("F:/LINKOPING/Manuscripts/Skyline/Skyline/TESTING.xlsx")|>
mutate(`Analyte Concentration`= as.numeric(`Analyte Concentration`))
# Function to create molecule names
create_molecule_name <- function(i, j) {
molecule_name <- paste0("C", i, "H", (2*i)+2-j, "Cl", j)
return(molecule_name)
}
# Create an empty list to store plots and calibration results
plotsA <- list()
calibration_resultsA <- data.frame(STD_code = character(),
Reference_standard = character(),
Chain_length = character(),
Type = character(),
Homologue = character(),
Response_factor = numeric(),
Intercept = numeric(),
R_squared = numeric(),
stringsAsFactors = FALSE)
# Define the range of i and j
i_values <- 11
j_values <- 3:11
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Create molecule name
molecule_name <- create_molecule_name(i, j)
# Filter data for the current molecule
filtered_dataA <- TESTING |>
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name, Note == "A")
# Check if there are any non-NA cases in the filtered data
if (sum(!is.na(filtered_dataA$Area)) == 0 || sum(!is.na(filtered_dataA$`Analyte Concentration`)) == 0) {
cat("No valid cases for fitting the model for molecule:", molecule_name, "\n")
} else {
# Fit linear model to the data
lm_modelA <- lm(Area ~ `Analyte Concentration`, data = filtered_dataA)
# Extract slope and intercept from the model
slopeA <- coef(lm_modelA)[2]
interceptA <- coef(lm_modelA)[1]
# Calculate R-squared
R_squaredA <- summary(lm_modelA)$r.squared
# Determine the type based on the value of i
if (i >= 10 && i <= 13) {
type <- "SCCPs"
} else if (i >= 14 && i <= 17) {
type <- "MCCPs"
} else if (i >= 18 && i <= 30) {
type <- "LCCPs"
} else {
type <- "Unknown"
}
# Fill the data frame
calibration_resultsA <- rbind(calibration_resultsA,
data.frame(STD_code = paste("A-", type),
Reference_standard = paste(type, "C", i, "Cl%", "52"),
Chain_length = paste("C",i),
Type = type,
Homologue = molecule_name,
Response_factor = round(slopeA),
Intercept = interceptA,
R_squared = R_squaredA))
# Create plot for the current molecule
plotA <- ggplot(filtered_dataA, aes(x = `Analyte Concentration`, y = Area)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
colour = "orange",
size = 1) +
theme_classic() +
ylab("Area") +
ggtitle(paste("Molecule:", molecule_name))
# Store the plot in the list
plotsA[[paste("Molecule", molecule_name)]] <- plotA
}
}
}
# Print the data frame with calibration results
print(calibration_resultsA)
# Arrange plots in a grid
calibration_curves_gridA <- plotsA[[1]]
for (i in 2:length(plotsA)) {
calibration_curves_gridA <- calibration_curves_gridA + plotsA[[i]]
}
# Print the grid of calibration curves
calibration_curves_gridA
############################################################## B standards
# Function to create molecule names
create_molecule_name <- function(i, j) {
molecule_name <- paste0("C", i, "H", (2*i)+2-j, "Cl", j)
return(molecule_name)
}
# Create an empty list to store plots and calibration results
plotsB <- list()
calibration_resultsB <- data.frame(STD_code = character(),
Reference_standard = character(),
Chain_length = character(),
Type = character(),
Homologue = character(),
Response_factor = numeric(),
Intercept = numeric(),
R_squared = numeric(),
stringsAsFactors = FALSE)
# Define the range of i and j
i_values <- 11
j_values <- 3:11
# Nested loops to iterate over i and j
for (i in i_values) {
for (j in j_values) {
# Create molecule name
molecule_name <- create_molecule_name(i, j)
# Filter data for the current molecule
filtered_dataB <- TESTING |>
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name, Note == "B")
# Check if there are any non-NA cases in the filtered data
if (sum(!is.na(filtered_dataB$Area)) == 0 || sum(!is.na(filtered_dataB$`Analyte Concentration`)) == 0) {
cat("No valid cases for fitting the model for molecule:", molecule_name, "\n")
} else {
# Fit linear model to the data
lm_modelB <- lm(Area ~ `Analyte Concentration`, data = filtered_dataB)
# Extract slope and intercept from the model
slopeB <- coef(lm_modelB)[2]
interceptB <- coef(lm_modelB)[1]
# Calculate R-squared
R_squaredB <- summary(lm_modelB)$r.squared
# Determine the type based on the value of i
if (i >= 10 && i <= 13) {
type <- "SCCPs"
} else if (i >= 14 && i <= 17) {
type <- "MCCPs"
} else if (i >= 18 && i <= 30) {
type <- "LCCPs"
} else {
type <- "Unknown"
}
# Fill the data frame
calibration_resultsB <- rbind(calibration_resultsB,
data.frame(STD_code = paste("B-", type),
Reference_standard = paste(type, "C", i, "Cl%", "57"),
Chain_length = paste("C",i),
Type = type,
Homologue = molecule_name,
Response_factor = round(slopeB),
Intercept = interceptB,
R_squared = R_squaredB))
# Create plot for the current molecule
plotB <- ggplot(filtered_dataB, aes(x = `Analyte Concentration`, y = Area)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
colour = "purple",
size = 1) +
theme_classic() +
ylab("Area") +
ggtitle(paste("Molecule:", molecule_name))
# Store the plot in the list
plotsB[[paste("Molecule", molecule_name)]] <- plotB
}
}
}
# Print the data frame with calibration results
print(calibration_resultsB)
# Arrange plots in a grid
calibration_curves_gridB <- plotsB[[1]]
for (i in 2:length(plotsB)) {
calibration_curves_gridB <- calibration_curves_gridB + plotsB[[i]]
}
# Print the grid of calibration curves
calibration_curves_gridB
combined_df <- rbind(calibration_resultsA, calibration_resultsB)
View(combined_df)
#Open input file
input <- combined_df
input$STD_code <- as.factor(input$STD_code)
#Open input file
input <- combined_df
input$STD_code <- as.factor(input$STD_code)
#Create all possible binary combinations between given calibration sets
Combinations <- combn(x = levels(input$STD_code),m = 2,FUN = NULL,simplify = TRUE)
#Store sum RFs for each group CP standard
input <- input %>% group_by(Reference_standard) %>% mutate(Sum_response_factor = sum(Response_factor, na.rm = TRUE))
input[c(1:5)] <- lapply(input[c(1:5)], as.factor)
input$Response_factor[is.na(input$Response_factor)] <- 0
View(input)
#Create all possible binary combinations between given calibration sets
Combinations <- combn(x = levels(input$STD_code),m = 2,FUN = NULL,simplify = TRUE)
View(Combinations)
#Store sum RFs for each group CP standard
input <- input |>  group_by(Reference_standard) |>  mutate(Sum_response_factor = sum(Response_factor, na.rm = TRUE))
#Load the libraries
library(dplyr)
library(tidyr)
library(tidyverse)
library(readxl)
library(patchwork)
#Store sum RFs for each group CP standard
input <- input |>  group_by(Reference_standard) |>  mutate(Sum_response_factor = sum(Response_factor, na.rm = TRUE))
input[c(1:5)] <- lapply(input[c(1:5)], as.factor)
input$Response_factor[is.na(input$Response_factor)] <- 0
#####PREPARE DATASET FOR PATTERN RECONSTRUCTION#####
{
#Open input file
input <- combined_df
input$STD_code <- as.factor(input$STD_code)
#Create all possible binary combinations between given calibration sets
Combinations <- combn(x = levels(input$STD_code),m = 2,FUN = NULL,simplify = TRUE)
#Store sum RFs for each group CP standard
input <- input |>  group_by(Reference_standard) |>  mutate(Sum_response_factor = sum(Response_factor, na.rm = TRUE))
input[c(1:5)] <- lapply(input[c(1:5)], as.factor)
input$Response_factor[is.na(input$Response_factor)] <- 0
}
TESTING<-read_excel("F:/LINKOPING/Manuscripts/Skyline/Skyline/TESTING.xlsx")|>
mutate(`Analyte Concentration`= as.numeric(`Analyte Concentration`))
#Load the file
GC_qToF_CPsFoodResults<-read_excel("F:/OREBRO/CP analysis/Food project/Result/Skyline/GC_qToF_CPsFoodResults.xlsx")
View(GC_qToF_CPsFoodResults)
View(TESTING)
TESTINGB<-read_excel("F:/LINKOPING/Manuscripts/Skyline/Skyline/TESTINGB.xlsx")
View(TESTINGB)
list_of_dfs <- split(TESTINGB, TESTINGB$`Replicate Name`)
list_of_samples <- split(TESTINGB, TESTINGB$`Replicate Name`)
View(list_of_samples)
# Accessing the data frame for a specific name (e.g., "name1")
D1_df <- list_of_samples[["D1"]]
View(D1_df)
# Iterate over each data frame in the list
for (`Replicate Name` in `Replicate Name`(list_of_samples)) {
# Access the data frame for the current name
current_df <- list_of_samples[[`Replicate Name`]]
# Perform operations on the current data frame
# For example, you can print the name and summary statistics of each data frame
cat("Sample:", `Replicate Name`, "\n")
print(summary(current_df))
# Or do any other processing you need
}
# Iterate over each data frame in the list
for (`Replicate Name` in `Replicate Name`(list_of_samples)) {
# Access the data frame for the current name
current_df <- list_of_samples[[name]]
# Perform operations on the current data frame
# For example, you can print the name and summary statistics of each data frame
cat("Name:", name, "\n")
print(summary(current_df))
# Or do any other processing you need
}
# Assuming 'df' is your original data frame and 'Replicate Name' is the column containing the names
list_of_samples <- split(TESTINGB, TESTINGB$`Replicate Name`)
# For example, to access and print summary statistics for each data frame:
for (name in names(list_of_dfs)) {
current_df <- list_of_dfs[[name]]
cat("Name:", name, "\n")
print(summary(current_df))
}
View(list_of_samples)
TESTINGB<-read_excel("F:/LINKOPING/Manuscripts/Skyline/Skyline/TESTINGB.xlsx")|>
filter(`Isotope Label Type` == "Quan")
View(TESTINGB)
list_of_samples <- split(TESTINGB, TESTINGB$`Replicate Name`)
# Accessing the data frame for a specific sample (e.g., "D1")
D1_df <- list_of_samples[["D1"]]
list_of_samples <- split(TESTINGB, TESTINGB$`Replicate Name`)
#For extrating something out of it:
# For example, to access and print summary statistics for each data frame:
for (name in names(list_of_samples)) {
current_df <- list_of_samples[[name]]
cat("Name:", name, "\n")
print(summary(current_df))
}
# Replace the read_xlsx() function with accessing the appropriate data frame from the list
sample <- list_of_samples[[sample.name]]
# Replace the read_xlsx() function with accessing the appropriate data frame from the list
sample <- list_of_samples[[TESTINGB$`Replicate Name`]]
# Replace the read_xlsx() function with accessing the appropriate data frame from the list
sample <- list_of_samples[[Replicate Name]]
# Replace the read_xlsx() function with accessing the appropriate data frame from the list
sample <- list_of_samples[["Replicate Name"]]
####RUN PATTERN RECONSTRACTION FOR SELECTED (LOADED) SAMPLE####
{
sample$Area <- as.numeric(sample$Area)
#Calculate relative area distribution within each homologue group
sample$Relative_distribution <- NA
sample$Area[is.na(sample$Area)] <- 0
sample <- sample %>% mutate(Relative_distribution = Area/sum(Area, na.rm = TRUE))
results <- sample
results[c("Comp_1","Comp_2","Fraction_Comp_1","Simulated_pattern")] <- NA
REF <- sample$Relative_distribution
Distance <- 100
for (z in 1:length(Combinations[1,])){
C_1 <- subset(input,subset = (STD_code == Combinations[1,z]))
C_2 <- subset(input,subset = (STD_code == Combinations[2,z]))
for (j in 1:100) {
Combo <- (C_1$Response_factor*j+C_2$Response_factor*(100-j))/sum((C_1$Response_factor*j+C_2$Response_factor*(100-j)), na.rm=TRUE)
if (Distance > (sum(sqrt((REF-Combo)^2)))) {
results$Comp_1 <- as.character(C_1$STD_code)
results$Comp_2 <- as.character(C_2$STD_code)
results$Fraction_Comp_1 <- j
results$Simulated_pattern <- Combo
Distance <- sum(sqrt((REF-Combo)^2))
}
}
}
results[c("RF_1st", "RF_2nd", "Concentration")] <- NA
results[c("RF_1st", "RF_2nd", "Concentration")] <- sapply(results[c("RF_1st", "RF_2nd", "Concentration")], as.numeric)
results$Fraction_Comp_1<- as.numeric(results$Fraction_Comp_1)
results$RF_1st <- input$Sum_response_factor[input$STD_code == results$Comp_1[1]]
results$RF_2nd <- input$Sum_response_factor[input$STD_code == results$Comp_2[1]]
results <- results %>% mutate(Concentration= sum(Area)/(RF_1st*(Fraction_Comp_1/100)+RF_2nd*((100-Fraction_Comp_1)/100)))
plot_table<-data.frame(Distribution = c(results$Relative_distribution,results$Simulated_pattern),Homologue = results$Homologue, Chain_length = results$Chain_length, Origin = rep(as.factor(c("Measured","Simulated")), each = nrow(results)))
plot_table$Homologue <- factor(plot_table$Homologue, levels=unique(plot_table$Homologue))
plot <- ggplot(plot_table, aes(x = Homologue,y = Distribution*100, fill = Origin, colour = Origin))+
geom_bar(stat="identity",position = position_dodge(width = 0.9), width = 0.8, size = .4)+
theme(panel.background = element_blank())+
scale_fill_manual(values=c("darkolivegreen3", "darkslategray4"))+
scale_color_manual(values=c("darkolivegreen4", "darkslategray"))+
ggtitle(label = paste(sample.name," - Distribution of CP homologues")) +
theme(plot.title = element_text(size = 10, face = "bold", hjust = 0))+
xlab("") + ylab("Relative area distribution, %")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(legend.key.size =  unit(0.15, "in"),
legend.text = element_text(size=10),
legend.title = element_text(size=10),
panel.background = element_rect(fill = "white"),panel.border = element_rect(fill = NA, colour = "grey20"),
panel.grid.major.y = element_line(colour = "grey50"),
panel.grid.minor.y = element_line(colour = "grey80"),
panel.grid.major.x = element_blank(),
legend.position = "bottom",strip.background = element_rect(fill = "grey20"), strip.text = element_text(colour = "white", face = "bold"))+
facet_wrap(.~ Chain_length, scales = "free",nrow = 4, ncol = 4)
results_output <-results %>% summarise(median(Concentration))
results_output$Type <- results$Type[1]
results_output$comment <- paste("The best match:",results$Fraction_Comp_1[1],"% of ",results$Comp_1[1]," and ",100-results$Fraction_Comp_1[1],"% of ",results$Comp_2[1], sep="")
colnames(results_output) <- c("Total concentration, ng/\U00B5L","Type","Sample name","Comment")
####RUN PATTERN RECONSTRACTION FOR SELECTED (LOADED) SAMPLE####
{
sample$Chain_length <- as.factor(sample$Chain_length)
sample$Area <- as.numeric(sample$Area)
#Calculate relative area distribution within each homologue group
sample$Relative_distribution <- NA
sample$Area[is.na(sample$Area)] <- 0
sample <- sample %>% mutate(Relative_distribution = Area/sum(Area, na.rm = TRUE))
results <- sample
results[c("Comp_1","Comp_2","Fraction_Comp_1","Simulated_pattern")] <- NA
#Deconvolution of homologue patterns
REF <- sample$Relative_distribution
Distance <- 100
for (z in 1:length(Combinations[1,])){
C_1 <- subset(input,subset = (STD_code == Combinations[1,z]))
C_2 <- subset(input,subset = (STD_code == Combinations[2,z]))
for (j in 1:100) {
Combo <- (C_1$Response_factor*j+C_2$Response_factor*(100-j))/sum((C_1$Response_factor*j+C_2$Response_factor*(100-j)), na.rm=TRUE)
if (Distance > (sum(sqrt((REF-Combo)^2)))) {
results$Comp_1 <- as.character(C_1$STD_code)
results$Comp_2 <- as.character(C_2$STD_code)
results$Fraction_Comp_1 <- j
results$Simulated_pattern <- Combo
Distance <- sum(sqrt((REF-Combo)^2))
}
}
}
#Calculate concentrations (ng per microliter)
results[c("RF_1st", "RF_2nd", "Concentration")] <- NA
results[c("RF_1st", "RF_2nd", "Concentration")] <- sapply(results[c("RF_1st", "RF_2nd", "Concentration")], as.numeric)
results$Fraction_Comp_1<- as.numeric(results$Fraction_Comp_1)
results$RF_1st <- input$Sum_response_factor[input$STD_code == results$Comp_1[1]]
results$RF_2nd <- input$Sum_response_factor[input$STD_code == results$Comp_2[1]]
results <- results %>% mutate(Concentration= sum(Area)/(RF_1st*(Fraction_Comp_1/100)+RF_2nd*((100-Fraction_Comp_1)/100)))
#Visualization of results
plot_table<-data.frame(Distribution = c(results$Relative_distribution,results$Simulated_pattern),Homologue = results$Homologue, Chain_length = results$Chain_length, Origin = rep(as.factor(c("Measured","Simulated")), each = nrow(results)))
plot_table$Homologue <- factor(plot_table$Homologue, levels=unique(plot_table$Homologue))
plot <- ggplot(plot_table, aes(x = Homologue,y = Distribution*100, fill = Origin, colour = Origin))+
geom_bar(stat="identity",position = position_dodge(width = 0.9), width = 0.8, size = .4)+
theme(panel.background = element_blank())+
scale_fill_manual(values=c("darkolivegreen3", "darkslategray4"))+
scale_color_manual(values=c("darkolivegreen4", "darkslategray"))+
ggtitle(label = paste(sample.name," - Distribution of CP homologues")) +
theme(plot.title = element_text(size = 10, face = "bold", hjust = 0))+
xlab("") + ylab("Relative area distribution, %")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(legend.key.size =  unit(0.15, "in"),
legend.text = element_text(size=10),
legend.title = element_text(size=10),
panel.background = element_rect(fill = "white"),panel.border = element_rect(fill = NA, colour = "grey20"),
panel.grid.major.y = element_line(colour = "grey50"),
panel.grid.minor.y = element_line(colour = "grey80"),
panel.grid.major.x = element_blank(),
legend.position = "bottom",strip.background = element_rect(fill = "grey20"), strip.text = element_text(colour = "white", face = "bold"))+
facet_wrap(.~ Chain_length, scales = "free",nrow = 4, ncol = 4)
results_output <-results %>% summarise(median(Concentration))
results_output$Type <- results$Type[1]
results_output$Sample <- sample.name
results_output$comment <- paste("The best match:",results$Fraction_Comp_1[1],"% of ",results$Comp_1[1]," and ",100-results$Fraction_Comp_1[1],"% of ",results$Comp_2[1], sep="")
colnames(results_output) <- c("Total concentration, ng/\U00B5L","Type","Sample name","Comment")
}
#Clean the environment
rm(list = ls())
#Clean the environment
rm(list = ls())

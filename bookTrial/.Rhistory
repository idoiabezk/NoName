summarize(AverageRecovery = mean(RatioStd, na.rm = TRUE)) #Calculate the average of the three standrads
#Filter for the standards that we want to compare to
GC_qToF_CPsFoodResultsB|>  select(`Replicate Name`, IS, RS)|> #Select the columns that we need
filter(str_detect(`Replicate Name`, "Std", negate = FALSE))|> #Select the standards
mutate(RatioStd = IS / RS) |> #Calculate the IS/RS area for the standards
summarize(AverageRatio = mean(RatioStd, na.rm = TRUE)) #Calculate the average of the three standrads
#Dividing the IS by RS for the samples
mutate(GC_qToF_CPsFoodResultsB,RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RecoverySample/33.7)
print(Recov)
#Dividing the IS by RS for the samples
mutate(GC_qToF_CPsFoodResultsB,RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/33.7)
print(Recov)
#Dividing the IS by RS for the samples
mutate(GC_qToF_CPsFoodResultsB,RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/33.7)
print(Recovery)
#Dividing the IS by RS for the samples
mutate(GC_qToF_CPsFoodResultsB,RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/33.7)|>
mutate(RecoveryPerc=Recovery*100)
#Dividing the IS by RS for the samples
mutate(GC_qToF_CPsFoodResultsB,RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/33.7)|>
mutate(RecoveryPerc=Recovery*100)
View(GC_qToF_CPsFoodResultsB)
#Dividing the IS by RS for the samples
Recovery<-mutate(GC_qToF_CPsFoodResultsB,RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/33.7)|>
mutate(RecoveryPerc=Recovery*100)
View(Recovery)
#Filter for the standards that we want to compare to
GC_qToF_CPsFoodResultsB<-GC_qToF_CPsFoodResultsB|>
select(`Replicate Name`, IS, RS)|> #Select the columns that we need
filter(str_detect(`Replicate Name`, "Std", negate = FALSE))|> #Select the standards
mutate(RatioStd = IS / RS) |> #Calculate the IS/RS area for the standards
summarize(AverageRatio = mean(RatioStd, na.rm = TRUE)) #Calculate the average of the three standards
#Filter for the standards that we want to compare to
Std<-GC_qToF_CPsFoodResultsB|>
select(`Replicate Name`, IS, RS)|> #Select the columns that we need
filter(str_detect(`Replicate Name`, "Std", negate = FALSE))|> #Select the standards
mutate(RatioStd = IS / RS) |> #Calculate the IS/RS area for the standards
summarize(AverageRatio = mean(RatioStd, na.rm = TRUE)) #Calculate the average of the three standards
#Wide the data so each sample is in one row
GC_qToF_CPsFoodResultsB <- GC_qToF_CPsFoodResults |>
filter(Quantitative == "YES") |>
pivot_wider(id_cols = `Replicate Name`,
names_from = Molecule, # name of the new column
values_from = Area #name of the values for the new columns
) #data type
#Make the data in the data frame numeric
pattern <- "^C\\d+" # This pattern matches column names starting with "C" followed by numbers
GC_qToF_CPsFoodResultsB <- mutate_at(GC_qToF_CPsFoodResultsB, vars(matches(pattern)), as.numeric) # Apply as.numeric() to columns matching the pattern
GC_qToF_CPsFoodResultsB$IS = as.numeric(GC_qToF_CPsFoodResultsB$IS)# Define the IS as numeric
#Divide the area of the homologues by the IS
CorrectedArea <- mutate_at(GC_qToF_CPsFoodResultsB, vars(matches(pattern)),
~ . / GC_qToF_CPsFoodResultsB$IS) #It will now do it for all the columns that have the pattern (start the name with "C")
## Calculate the recovery
```{r}
# Define the RS as numeric
GC_qToF_CPsFoodResultsB$RS = as.numeric(GC_qToF_CPsFoodResultsB$RS)
GC_qToF_CPsFoodResultsB$IS = as.numeric(GC_qToF_CPsFoodResultsB$IS)
#Filter for the standards that we want to compare to
Std<-GC_qToF_CPsFoodResultsB|>
select(`Replicate Name`, IS, RS)|> #Select the columns that we need
filter(str_detect(`Replicate Name`, "Std", negate = FALSE))|> #Select the standards
mutate(RatioStd = IS / RS) |> #Calculate the IS/RS area for the standards
summarize(AverageRatio = mean(RatioStd, na.rm = TRUE)) #Calculate the average of the three standards
View(Std)
#Dividing the IS by RS for the samples
GC_qToF_CPsFoodResultsB<-mutate(GC_qToF_CPsFoodResultsB,RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/Std)|>
mutate(RecoveryPerc=Recovery*100)
View(GC_qToF_CPsFoodResultsB)
#Dividing the IS by RS for the samples
GC_qToF_CPsFoodResultsC<-mutate(GC_qToF_CPsFoodResultsB,RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/33.71871)|>
mutate(RecoveryPerc=Recovery*100)
View(GC_qToF_CPsFoodResultsC)
##Plotting the recovery
ggplot(GC_qToF_CPsFoodResultsC, aes(x = `Replicate Name`, y = RecoveryPerc, fill = Sample)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sample", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
##Plotting the recovery
ggplot(GC_qToF_CPsFoodResultsC, aes(x = `Replicate Name`, y = RecoveryPerc)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sample", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
##########################Instead of taking Std writing the value works #############################
#Dividing the IS by RS for the samples
GC_qToF_CPsFoodResultsC<-GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "_", negate = FALSE))|> #Exclude the standards
mutate(GC_qToF_CPsFoodResultsB,RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/33.71871)|>
mutate(RecoveryPerc=Recovery*100)
#Filter for the standards that we want to compare to
Std<-GC_qToF_CPsFoodResultsB|>
select(`Replicate Name`, IS, RS)|> #Select the columns that we need
filter(str_detect(`Replicate Name`, "Std", negate = FALSE))|> #Select the standards
mutate(RatioStd = IS / RS) |> #Calculate the IS/RS area for the standards
summarize(AverageRatio = mean(RatioStd, na.rm = TRUE)) #Calculate the average of the three standards
##########################Instead of taking Std writing the value works #############################
#Dividing the IS by RS for the samples
GC_qToF_CPsFoodResultsC<-GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "_", negate = FALSE))|> #Exclude the standards
mutate(GC_qToF_CPsFoodResultsB,RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/33.71871)|>
mutate(RecoveryPerc=Recovery*100)
View(GC_qToF_CPsFoodResultsB)
#Wide the data so each sample is in one row
GC_qToF_CPsFoodResultsB <- GC_qToF_CPsFoodResults |>
filter(Quantitative == "YES") |>
pivot_wider(id_cols = `Replicate Name`,
names_from = Molecule, # name of the new column
values_from = Area #name of the values for the new columns
) #data type
#Make the data in the data frame numeric
pattern <- "^C\\d+" # This pattern matches column names starting with "C" followed by numbers
GC_qToF_CPsFoodResultsB <- mutate_at(GC_qToF_CPsFoodResultsB, vars(matches(pattern)), as.numeric) # Apply as.numeric() to columns matching the pattern
GC_qToF_CPsFoodResultsB$IS = as.numeric(GC_qToF_CPsFoodResultsB$IS)# Define the IS as numeric
#Divide the area of the homologues by the IS
CorrectedArea <- mutate_at(GC_qToF_CPsFoodResultsB, vars(matches(pattern)),
~ . / GC_qToF_CPsFoodResultsB$IS) #It will now do it for all the columns that have the pattern (start the name with "C")
# Define the RS as numeric
GC_qToF_CPsFoodResultsB$RS = as.numeric(GC_qToF_CPsFoodResultsB$RS)
GC_qToF_CPsFoodResultsB$IS = as.numeric(GC_qToF_CPsFoodResultsB$IS)
##########################Instead of taking Std writing the value works #############################
#Dividing the IS by RS for the samples
GC_qToF_CPsFoodResultsC<-GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "_", negate = FALSE))|> #Exclude the standards
mutate(GC_qToF_CPsFoodResultsB,RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/33.71871)|>
mutate(RecoveryPerc=Recovery*100)
##########################Instead of taking Std writing the value works #############################
#Dividing the IS by RS for the samples
GC_qToF_CPsFoodResultsC<-GC_qToF_CPsFoodResultsB|>
mutate(GC_qToF_CPsFoodResultsB,RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/33.71871)|>
mutate(RecoveryPerc=Recovery*100)
##Plotting the recovery
ggplot(GC_qToF_CPsFoodResultsC, aes(x = `Replicate Name`, y = RecoveryPerc)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sample", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
####Exclude the calibration standards
GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "9_", "10_", "11_", negate = TRUE))
####Exclude the calibration standards
GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "9_", negate = TRUE))
####Exclude the calibration standards
GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "9_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "10_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "11_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "12_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "13_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "14_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "15_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "17_", negate = TRUE))|>
mutate(GC_qToF_CPsFoodResultsB,RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/Std)|>
mutate(RecoveryPerc=Recovery*100)
####Exclude the calibration standards
GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "9_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "10_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "11_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "12_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "13_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "14_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "15_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "17_", negate = TRUE))
####Exclude the calibration standards
GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "9_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "10_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "11_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "12_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "13_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "14_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "15_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "17_", negate = TRUE))
mutate(RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/Std)|>
mutate(RecoveryPerc=Recovery*100)
####Exclude the calibration standards
GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "9_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "10_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "11_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "12_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "13_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "14_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "15_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "17_", negate = TRUE))|>
mutate(RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/Std)|>
mutate(RecoveryPerc=Recovery*100)
####Exclude the calibration standards
GC_qToF_CPsFoodResultsD<-GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "9_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "10_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "11_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "12_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "13_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "14_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "15_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "17_", negate = TRUE))
##########################Instead of taking Std writing the value works #############################
#Dividing the IS by RS for the samples
GC_qToF_CPsFoodResultsC<-GC_qToF_CPsFoodResultsD|>
mutate(GC_qToF_CPsFoodResultsD,RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/33.71871)|>
mutate(RecoveryPerc=Recovery*100)
##Plotting the recovery
ggplot(GC_qToF_CPsFoodResultsC, aes(x = `Replicate Name`, y = RecoveryPerc)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sample", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
####Exclude the calibration standards
GC_qToF_CPsFoodResultsD<-GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "9_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "10_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "11_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "12_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "13_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "14_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "15_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "16_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "17_", negate = TRUE))
##########################Instead of taking Std writing the value works #############################
#Dividing the IS by RS for the samples
GC_qToF_CPsFoodResultsC<-GC_qToF_CPsFoodResultsD|>
mutate(GC_qToF_CPsFoodResultsD,RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/33.71871)|>
mutate(RecoveryPerc=Recovery*100)
##Plotting the recovery
ggplot(GC_qToF_CPsFoodResultsC, aes(x = `Replicate Name`, y = RecoveryPerc)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sample", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
####Exclude the calibration standards
GC_qToF_CPsFoodResultsD<-GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "9_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "10_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "11_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "12_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "13_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "14_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "15_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "16_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "17_", negate = TRUE))|>
mutate(GC_qToF_CPsFoodResultsB, RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/Std)|>
mutate(RecoveryPerc=Recovery*100)
####Exclude the calibration standards
GC_qToF_CPsFoodResultsD<-GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "9_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "10_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "11_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "12_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "13_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "14_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "15_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "16_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "17_", negate = TRUE))|>
mutate(GC_qToF_CPsFoodResultsD, RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/Std)|>
mutate(RecoveryPerc=Recovery*100)
##Plotting the recovery
ggplot(GC_qToF_CPsFoodResultsD, aes(x = `Replicate Name`, y = RecoveryPerc)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sample", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
View(GC_qToF_CPsFoodResultsD)
####Exclude the calibration standards
GC_qToF_CPsFoodResultsD<-GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "9_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "10_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "11_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "12_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "13_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "14_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "15_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "16_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "17_", negate = TRUE))|>
filter(str_detect(`Replicate Name`, "Std", negate = TRUE))|>
mutate(RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/Std)|>
mutate(RecoveryPerc=Recovery*100)
##########################Instead of taking Std writing the value works #############################
#Dividing the IS by RS for the samples
GC_qToF_CPsFoodResultsD<-GC_qToF_CPsFoodResultsD|>
mutate(GC_qToF_CPsFoodResultsD,RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/33.71871)|>
mutate(RecoveryPerc=Recovery*100)
##Plotting the recovery
ggplot(GC_qToF_CPsFoodResultsD, aes(x = `Replicate Name`, y = RecoveryPerc)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sample", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
View(GC_qToF_CPsFoodResultsD)
# Define the RS as numeric
GC_qToF_CPsFoodResultsB$RS = as.numeric(GC_qToF_CPsFoodResultsB$RS)
GC_qToF_CPsFoodResultsB$IS = as.numeric(GC_qToF_CPsFoodResultsB$IS)
####Filter for the standards that we want to compare to
Std<-GC_qToF_CPsFoodResultsB|>
select(`Replicate Name`, IS, RS)|> #Select the columns that we need
filter(str_detect(`Replicate Name`, "Std", negate = FALSE))|> #Select the standards
mutate(RatioStd = IS / RS) |> #Calculate the IS/RS area for the standards
summarize(AverageRatio = mean(RatioStd, na.rm = TRUE)) #Calculate the average of the three standards
####Calculate the recovery
GC_qToF_CPsFoodResultsD<-GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "9_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "10_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "11_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "12_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "13_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "14_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "15_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "16_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "17_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "Std", negate = TRUE))|>#Exclude the calibration standards
mutate(RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/33.71871)|> #Divide each sample ratio of IS/RS by the average ratio of the standards
mutate(RecoveryPerc=Recovery*100) #The recovery in percentage
#######Plotting the recovery
ggplot(GC_qToF_CPsFoodResultsD, aes(x = `Replicate Name`, y = RecoveryPerc)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Sample", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
# Define colors based on conditions
GC_qToF_CPsFoodResultsD$color <- ifelse(GC_qToF_CPsFoodResultsD$RecoveryPerc == 50, "red", "green")
# Bar plot
ggplot(GC_qToF_CPsFoodResultsD, aes(x = `Replicate Name`, y = RecoveryPerc, fill = color)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("red", "green"), guide = FALSE) +
labs(x = "Replicate Name", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
# Define colors based on conditions
GC_qToF_CPsFoodResultsD$color <- ifelse(GC_qToF_CPsFoodResultsD$RecoveryPerc < 50, "red", "green")
# Bar plot
ggplot(GC_qToF_CPsFoodResultsD, aes(x = `Replicate Name`, y = RecoveryPerc, fill = color)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("red", "green"), guide = FALSE) +
labs(x = "Replicate Name", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
# Define colors based on conditions
GC_qToF_CPsFoodResultsD$color <- ifelse(GC_qToF_CPsFoodResultsD$RecoveryPerc > 50, "red", "green")
# Bar plot
ggplot(GC_qToF_CPsFoodResultsD, aes(x = `Replicate Name`, y = RecoveryPerc, fill = color)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("red", "green"), guide = FALSE) +
labs(x = "Replicate Name", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
#######Plotting the recovery
# Define colors based on conditions: less than 50% red and above green
GC_qToF_CPsFoodResultsD$color <- ifelse(GC_qToF_CPsFoodResultsD$RecoveryPerc > 50, "#A52A2A", "#458B00")
# Bar plot
ggplot(GC_qToF_CPsFoodResultsD, aes(x = `Replicate Name`, y = RecoveryPerc, fill = color)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("#A52A2A", "#458B00"), guide = FALSE) +
labs(x = "Replicate Name", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
#######Plotting the recovery
# Define colors based on conditions: less than 50% red and above green
GC_qToF_CPsFoodResultsD$color <- ifelse(GC_qToF_CPsFoodResultsD$RecoveryPerc > 50, "#A52A2A", "#00CD00")
# Bar plot
ggplot(GC_qToF_CPsFoodResultsD, aes(x = `Replicate Name`, y = RecoveryPerc, fill = color)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("#A52A2A", "#458B00"), guide = FALSE) +
labs(x = "Replicate Name", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
#######Plotting the recovery
# Define colors based on conditions: less than 50% red and above green
GC_qToF_CPsFoodResultsD$color <- ifelse(GC_qToF_CPsFoodResultsD$RecoveryPerc > 50, "#A52A2A", "#9ACD32")
# Bar plot
ggplot(GC_qToF_CPsFoodResultsD, aes(x = `Replicate Name`, y = RecoveryPerc, fill = color)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("#A52A2A", "#9ACD32"), guide = FALSE) +
labs(x = "Replicate Name", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
#######Plotting the recovery
# Define colors based on conditions: less than 50% red and above green
GC_qToF_CPsFoodResultsD$color <- ifelse(GC_qToF_CPsFoodResultsD$RecoveryPerc > 50, "#CD3333", "#9ACD32")
# Bar plot
ggplot(GC_qToF_CPsFoodResultsD, aes(x = `Replicate Name`, y = RecoveryPerc, fill = color)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("#CD3333", "#9ACD32"), guide = FALSE) +
labs(x = "Replicate Name", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
#Reorder the samples
GC_qToF_CPsFoodResultsD$`Replicate Name` <- factor(GC_qToF_CPsFoodResultsD$`Replicate Name`, levels = c("1", "1b", "1c", "2", "4a", "4b", "5a", "5b", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "18", "19", "20", "D1", "D2", "D3", "21 Na2SO4", "2324 FB", "25 LB", "26 LB", "27 LB", "28 LB", "29 MLB"))
# Bar plot
ggplot(GC_qToF_CPsFoodResultsD, aes(x = `Replicate Name`, y = RecoveryPerc, fill = color)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("#CD3333", "#9ACD32"), guide = FALSE) +
labs(x = "Replicate Name", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
#Wide the data so each sample is in one row
GC_qToF_CPsFoodResultsB <- GC_qToF_CPsFoodResults |>
filter(Quantitative == "YES") |>
pivot_wider(id_cols = `Replicate Name`,
names_from = Molecule, # name of the new column
values_from = Area #name of the values for the new columns
) #data type
#Make the data in the data frame numeric
pattern <- "^C\\d+" # This pattern matches column names starting with "C" followed by numbers
GC_qToF_CPsFoodResultsB <- mutate_at(GC_qToF_CPsFoodResultsB, vars(matches(pattern)), as.numeric) # Apply as.numeric() to columns matching the pattern
GC_qToF_CPsFoodResultsB$IS = as.numeric(GC_qToF_CPsFoodResultsB$IS)# Define the IS as numeric
#Divide the area of the homologues by the IS
CorrectedArea <- mutate_at(GC_qToF_CPsFoodResultsB, vars(matches(pattern)),
~ . / GC_qToF_CPsFoodResultsB$IS) #It will now do it for all the columns that have the pattern (start the name with "C")
## Calculate the recovery
```{r}
# Define the RS as numeric
GC_qToF_CPsFoodResultsB$RS = as.numeric(GC_qToF_CPsFoodResultsB$RS)
GC_qToF_CPsFoodResultsB$IS = as.numeric(GC_qToF_CPsFoodResultsB$IS)
####Filter for the standards that we want to compare to
Std<-GC_qToF_CPsFoodResultsB|>
select(`Replicate Name`, IS, RS)|> #Select the columns that we need
filter(str_detect(`Replicate Name`, "Std", negate = FALSE))|> #Select the standards
mutate(RatioStd = IS / RS) |> #Calculate the IS/RS area for the standards
summarize(AverageRatio = mean(RatioStd, na.rm = TRUE)) #Calculate the average of the three standards
####Calculate the recovery
GC_qToF_CPsFoodResultsD<-GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "9_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "10_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "11_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "12_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "13_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "14_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "15_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "16_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "17_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "Std", negate = TRUE))|>#Exclude the calibration standards
mutate(RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/33.71871)|> #Divide each sample ratio of IS/RS by the average ratio of the standards
mutate(RecoveryPerc=Recovery*100) #The recovery in percentage
#######Plotting the recovery
# Define colors based on conditions: less than 50% red and above green
GC_qToF_CPsFoodResultsD$color <- ifelse(GC_qToF_CPsFoodResultsD$RecoveryPerc > 50, "#CD3333", "#9ACD32")
# Bar plot
ggplot(GC_qToF_CPsFoodResultsD, aes(x = `Replicate Name`, y = RecoveryPerc, fill = color)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("#CD3333", "#9ACD32"), guide = FALSE) +
labs(x = "Replicate Name", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
#Reorder the samples
GC_qToF_CPsFoodResultsD$`Replicate Name` <- factor(GC_qToF_CPsFoodResultsD$`Replicate Name`, levels = c("1", "1B", "1C", "2", "4A", "4B", "5A", "5B", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "18", "19", "20", "D1", "D2", "D3", "21 Na2SO4", "23 24 FB", "25 LB", "26 LB", "27 LB", "28 LB", "29 MLB"))
# Bar plot
ggplot(GC_qToF_CPsFoodResultsD, aes(x = `Replicate Name`, y = RecoveryPerc, fill = color)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("#CD3333", "#9ACD32"), guide = FALSE) +
labs(x = "Replicate Name", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()
#Wide the data so each sample is in one row
GC_qToF_CPsFoodResultsB <- GC_qToF_CPsFoodResults |>
filter(Quantitative == "YES") |>
pivot_wider(id_cols = `Replicate Name`,
names_from = Molecule, # name of the new column
values_from = Area #name of the values for the new columns
) #data type
#Make the data in the data frame numeric
pattern <- "^C\\d+" # This pattern matches column names starting with "C" followed by numbers
GC_qToF_CPsFoodResultsB <- mutate_at(GC_qToF_CPsFoodResultsB, vars(matches(pattern)), as.numeric) # Apply as.numeric() to columns matching the pattern
GC_qToF_CPsFoodResultsB$IS = as.numeric(GC_qToF_CPsFoodResultsB$IS)# Define the IS as numeric
#Divide the area of the homologues by the IS
CorrectedArea <- mutate_at(GC_qToF_CPsFoodResultsB, vars(matches(pattern)),
~ . / GC_qToF_CPsFoodResultsB$IS) #It will now do it for all the columns that have the pattern (start the name with "C")
## Calculate the recovery
```{r}
# Define the RS as numeric
GC_qToF_CPsFoodResultsB$RS = as.numeric(GC_qToF_CPsFoodResultsB$RS)
GC_qToF_CPsFoodResultsB$IS = as.numeric(GC_qToF_CPsFoodResultsB$IS)
####Filter for the standards that we want to compare to
Std<-GC_qToF_CPsFoodResultsB|>
select(`Replicate Name`, IS, RS)|> #Select the columns that we need
filter(str_detect(`Replicate Name`, "Std", negate = FALSE))|> #Select the standards
mutate(RatioStd = IS / RS) |> #Calculate the IS/RS area for the standards
summarize(AverageRatio = mean(RatioStd, na.rm = TRUE)) #Calculate the average of the three standards
####Calculate the recovery
GC_qToF_CPsFoodResultsD<-GC_qToF_CPsFoodResultsB|>
filter(str_detect(`Replicate Name`, "9_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "10_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "11_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "12_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "13_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "14_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "15_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "16_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "17_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "Std", negate = TRUE))|>#Exclude the calibration standards
mutate(RatioSample= IS / RS) |> #Divide IS/RS for all samples
mutate(Recovery=RatioSample/33.71871)|> #Divide each sample ratio of IS/RS by the average ratio of the standards
mutate(RecoveryPerc=Recovery*100) #The recovery in percentage
#######Plotting the recovery
# Define colors based on conditions: less than 50% red and above green
GC_qToF_CPsFoodResultsD$color <- ifelse(GC_qToF_CPsFoodResultsD$RecoveryPerc > 50, "#CD3333", "#9ACD32")
#Reorder the samples
# Bar plot
#Reorder the samples
GC_qToF_CPsFoodResultsD$`Replicate Name` <- factor(GC_qToF_CPsFoodResultsD$`Replicate Name`, levels = c("1", "1B", "1C", "2", "3", "4A", "4B", "5A", "5B", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "18", "19", "20", "D1", "D2", "D3", "21 Na2SO4", "23 24 FB", "25 LB", "26 LB", "27 LB", "28 LB", "29 MLB"))
# Bar plot
ggplot(GC_qToF_CPsFoodResultsD, aes(x = `Replicate Name`, y = RecoveryPerc, fill = color)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("#CD3333", "#9ACD32"), guide = FALSE) +
labs(x = "Replicate Name", y = "RECOVERY", title = "RECOVERY") +
theme_minimal()

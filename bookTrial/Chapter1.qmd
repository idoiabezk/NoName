# Getting familiar with R programming

**This first chapter summarized all the basic information for understanding how R works.**

## **Basic understanding**

Before starting with Rstudio functioning, it is essential to briefly summarize the terminology and different elements used in programming.

### *Terminology*

-   **Command:** The command refers to a specific instruction or operation written in the R programming language that users enter into the console or the script editor. In other words, the command is the code that is written to perform various tasks.
-   **Function:** A function is a block of organized, reusable code designed to perform a specific task. Functions in R are used to encapsulate a set of operations or calculations that can be applied to input data, producing an output. They can be built-in functions provided by R or user-defined functions created by the programmer.
-   **Argument:** An argument is a value passed to a function to customize its behavior or provide input data. Functions in R can have zero or more arguments, which are specified within parentheses when the function is called. Arguments can be variables, constants, or expressions, and they influence the outcome of the function's execution.
-   **Script:** the script refers to a file containing a series of R commands and functions written in the R programming language. Scripts are used to organize and execute multiple commands sequentially to achieve specific tasks, such as data analysis, visualization, or modeling.

### *R studio elements*

-   **Console:** the console is the interactive environment where users can directly enter and execute R commands. It provides immediate feedback, displaying the output of commands, errors, warnings, and messages generated during code execution. It is important to remark that the data displayed in the console is not saved.
-   **Script Editor:** The script editor is where you write, edit, and save R scripts. Scripts contain a series of R commands and functions organized to perform specific tasks.
-   **Environment Pane:** this pane displays information about the current R environment, including data objects, functions, and variables that are currently loaded into memory.
-   **File Pane:** the file pane allows you to navigate your file system, view files, and manage your R projects. You can also create new files, folders, and scripts from this pane.
-   **Plots Pane:** when you create visualizations or plots in R, they are displayed in the plots pane. This pane allows you to view and interact with your plots.
-   **Packages Pane:** R packages are collections of functions, data sets, and documentation that extend the capabilities of R. The packages pane allows you to manage and install packages from CRAN (Comprehensive R Archive Network) and other sources.
-   **Help Pane:** this pane provides access to R documentation and help files. You can search for functions, packages, and topics to find relevant documentation and examples.
-   **Viewer Pane:** the viewer pane displays web-based content generated by R packages or Shiny applications.
-   **Git Pane:** if you are using version control with Git, the Git pane allows you to manage your Git repositories, commit changes, and view version history.
-   **Toolbar:** he toolbar provides quick access to commonly used actions and commands, such as saving files, running code, and debugging.

filtered_dataB <- TESTING |>
filter(`Isotope Label Type` == "Quan", Molecule == molecule_name, Note == "B")
# Check if there are any non-NA cases in the filtered data
if (sum(!is.na(filtered_dataB$Area)) == 0 || sum(!is.na(filtered_dataB$`Analyte Concentration`)) == 0) {
cat("No valid cases for fitting the model for molecule:", molecule_name, "\n")
} else {
# Fit linear model to the data
lm_modelB <- lm(Area ~ `Analyte Concentration`, data = filtered_dataB)
# Extract slope and intercept from the model
slopeB <- coef(lm_modelB)[2]
interceptB <- coef(lm_modelB)[1]
# Calculate R-squared
R_squaredB <- summary(lm_modelB)$r.squared
# Determine the type based on the value of i
if (i >= 10 && i <= 13) {
type <- "SCCPs"
} else if (i >= 14 && i <= 17) {
type <- "MCCPs"
} else if (i >= 18 && i <= 30) {
type <- "LCCPs"
} else {
type <- "Unknown"
}
# Fill the data frame
calibration_resultsB <- rbind(calibration_resultsB,
data.frame(STD_code = paste("B-", type),
Reference_standard = paste(type, "C", i, "Cl%", "57"),
Chain_length = paste("C",i),
Type = type,
Homologue = molecule_name,
Response_factor = round(slopeB),
Intercept = interceptB,
R_squared = R_squaredB))
# Create plot for the current molecule
plotB <- ggplot(filtered_dataB, aes(x = `Analyte Concentration`, y = Area)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE,
colour = "purple",
size = 1) +
theme_classic() +
ylab("Area") +
ggtitle(paste("Molecule:", molecule_name))
# Store the plot in the list
plotsB[[paste("Molecule", molecule_name)]] <- plotB
}
}
}
# Print the data frame with calibration results
print(calibration_resultsB)
# Arrange plots in a grid
calibration_curves_gridB <- plotsB[[1]]
for (i in 2:length(plotsB)) {
calibration_curves_gridB <- calibration_curves_gridB + plotsB[[i]]
}
# Print the grid of calibration curves
calibration_curves_gridB
combined_df <- rbind(calibration_resultsA, calibration_resultsB)
TESTINGB<-read_excel("F:/LINKOPING/Manuscripts/Skyline/Skyline/TESTINGB.xlsx")|> #Read the result file
filter(`Isotope Label Type` == "Quan")|> #Filter for the quan ions
mutate(Area= as.numeric(Area))   #Make sure that the values are numeric
TESTINGB$Chain_length <- sub(".*-C(9|10|11|12|13|14|15|16|17)$", "\\1", TESTINGB$"Molecule List")   #Generate the column chain Length which will contain the number of carbons
# Determine the type based on the Chain length
TESTINGB$type <- ifelse(
TESTINGB$Chain_length >= 10 & TESTINGB$Chain_length <= 13,
"SCCPs",
ifelse(
TESTINGB$Chain_length >= 14 & TESTINGB$Chain_length <= 17,
"MCCPs",
ifelse(
TESTINGB$Chain_length >= 18 & TESTINGB$Chain_length <= 30,
"LCCPs",
"Unknown"
)
)
)
TESTINGB$Chain_length <- paste("C",sub(".*-C(9|10|11|12|13|14|15|16|17)$", "\\1", TESTINGB$"Molecule List")) #Change the column chain Length column so it fits the following script and the one of the standards
#Rename the column Molecule to Homologue so it fits the next script and the one of the standards
colnames(TESTINGB)[which(colnames(TESTINGB) == "Molecule")] <- "Homologue"
#Remove the standards:
TESTINGB<-TESTINGB|>
filter(str_detect(`Replicate Name`, "9_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "10_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "11_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "12_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "13_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "14_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "15_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "16_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "17_", negate = TRUE))|>#Exclude the calibration standards
filter(str_detect(`Replicate Name`, "Std", negate = TRUE))#Exclude the calibration standards
list_of_samples <- split(TESTINGB, TESTINGB$`Replicate Name`)
list_of_samples <- split(TESTINGB, TESTINGB$`Replicate Name`)
#####Set working directory#####
working.directory <- "F:/LINKOPING/Manuscripts/Skyline/Skyline/"
#####PREPARE DATASET FOR PATTERN RECONSTRUCTION#####
{
#Open input file
input <- combined_df
input$STD_code <- as.factor(input$STD_code)
#Create all possible binary combinations between given calibration sets
Combinations <- combn(x = levels(input$STD_code),m = 2,FUN = NULL,simplify = TRUE)
#Store sum RFs for each group CP standard
input <- input |>  group_by(Reference_standard) |>  mutate(Sum_response_factor = sum(Response_factor, na.rm = TRUE))
input[c(1:5)] <- lapply(input[c(1:5)], as.factor)
input$Response_factor[is.na(input$Response_factor)] <- 0
}
#####SECTION FOR SAMPLE PROCESSING#####
# Iterating over each data frame in the list
for (sample_df in list_of_samples) {
# Get the 'Replicate Name' value from the data frame
sample_name <- sample_df$`Replicate Name`
# Set sample name
# (You can print the sample name to verify it's correct)
print(paste("Processing sample:", sample_name))
# Now you can use the sample_df for further processing
####RUN PATTERN RECONSTRACTION FOR SELECTED (LOADED) SAMPLE####
sample_df <- sample_df |>
mutate(
Chain_length = as.factor(Chain_length),
Area = as.numeric(Area),
Relative_distribution = Area / sum(Area, na.rm = TRUE)
)
#Calculate relative area distribution within each homologue group
sample_df$Relative_distribution <- NA
sample_df$Area[is.na(sample$Area)] <- 0
sample_df <- sample_df %>% mutate(Relative_distribution = Area/sum(Area, na.rm = TRUE))
results <- sample_df
results[c("Comp_1","Comp_2","Fraction_Comp_1","Simulated_pattern")] <- NA
# Create 'results' data frame and perform other operations as needed
results <- sample_df
results[c("Comp_1", "Comp_2", "Fraction_Comp_1", "Simulated_pattern")] <- NA
# Deconvolution of homologue patterns (adjust your loop accordingly)
REF <- sample_df$Relative_distribution
Distance <- 100
for (z in 1:length(Combinations[1,])) {
C_1 <- subset(input, subset = (STD_code == Combinations[1, z]))
C_2 <- subset(input, subset = (STD_code == Combinations[2, z]))
for (j in 1:100) {
Combo <- (C_1$Response_factor * j + C_2$Response_factor * (100 - j)) / sum((C_1$Response_factor * j + C_2$Response_factor * (100 - j)), na.rm = TRUE)
# Check for NA values in REF or Combo before comparison
if (!any(is.na(REF)) && !any(is.na(Combo)) && Distance > (sum(sqrt((REF - Combo)^2)))) {
results$Comp_1 <- as.character(C_1$STD_code)
results$Comp_2 <- as.character(C_2$STD_code)
results$Fraction_Comp_1 <- j
results$Simulated_pattern <- Combo
Distance <- sum(sqrt((REF - Combo)^2))
}
}
}
# Calculate concentrations (ng per microliter)
results$RF_1st <- NA
results$RF_2nd <- NA
for (i in 1:nrow(results)) {
results$RF_1st[i] <- input$Sum_response_factor[input$STD_code == results$Comp_1[i]]
results$RF_2nd[i] <- input$Sum_response_factor[input$STD_code == results$Comp_2[i]]
}
results <- results %>%
mutate(
RF_1st = as.numeric(RF_1st),
RF_2nd = as.numeric(RF_2nd),
Concentration = sum(Area) / (RF_1st * (Fraction_Comp_1 / 100) + RF_2nd * ((100 - Fraction_Comp_1) / 100))
)
# Visualization of results
plot_table <- data.frame(
Distribution = c(results$Relative_distribution, results$Simulated_pattern),
Homologue = results$Homologue,
Chain_length = results$Chain_length,
Origin = rep(as.factor(c("Measured", "Simulated")), each = nrow(results))
)
plot_table$Homologue <- factor(plot_table$Homologue, levels = unique(plot_table$Homologue))
plot <- ggplot(plot_table, aes(x = Homologue, y = Distribution * 100, fill = Origin, colour = Origin)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8, size = .4) +
theme(panel.background = element_blank()) +
scale_fill_manual(values = c("darkolivegreen3", "darkslategray4")) +
scale_color_manual(values = c("darkolivegreen4", "darkslategray")) +
ggtitle(label = paste(sample.name, " - Distribution of CP homologues")) +
theme(plot.title = element_text(size = 10, face = "bold", hjust = 0)) +
xlab("") + ylab("Relative area distribution, %") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(
legend.key.size = unit(0.15, "in"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(fill = NA, colour = "grey20"),
panel.grid.major.y = element_line(colour = "grey50"),
panel.grid.minor.y = element_line(colour = "grey80"),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill = "grey20"),
strip.text = element_text(colour = "white", face = "bold")
) +
facet_wrap(. ~ Chain_length, scales = "free", nrow = 4, ncol = 4)
results_output <- results %>%
summarise(median(Concentration)) %>%
mutate(
Type = results$Type[1],
Sample = sample.name,
Comment = paste("The best match:", Fraction_Comp_1[1], "% of ", Comp_1[1], " and ", 100 - Fraction_Comp_1[1], "% of ", Comp_2[1])
) %>%
rename("Total concentration, ng/ÂµL" = "median(Concentration)")
}
####VIEW RESULTS####
#View Overview
print(results_output)
#View full results
print(results)
#View graph
plot
#####SECTION FOR SAMPLE PROCESSING#####
# Iterating over each data frame in the list
for (sample_df in list_of_samples) {
# Get the 'Replicate Name' value from the data frame
sample_name <- sample_df$`Replicate Name`
# Set sample name
# (You can print the sample name to verify it's correct)
print(paste("Processing sample:", sample_name))
####RUN PATTERN RECONSTRACTION FOR SELECTED (LOADED) SAMPLE####
sample_df <- sample_df |>
mutate(
Chain_length = as.factor(Chain_length),
Area = as.numeric(Area),
Relative_distribution = Area / sum(Area, na.rm = TRUE)
)
#Calculate relative area distribution within each homologue group
sample_df$Relative_distribution <- NA
sample_df$Area[is.na(sample$Area)] <- 0
sample_df <- sample_df %>% mutate(Relative_distribution = Area/sum(Area, na.rm = TRUE))
results <- sample_df
results[c("Comp_1","Comp_2","Fraction_Comp_1","Simulated_pattern")] <- NA
# Create 'results' data frame and perform other operations as needed
results <- sample_df
results[c("Comp_1", "Comp_2", "Fraction_Comp_1", "Simulated_pattern")] <- NA
REF <- sample_df$Relative_distribution
Distance <- 100
for (z in 1:length(Combinations[1,])) {
C_1 <- subset(input, subset = (STD_code == Combinations[1, z]))
C_2 <- subset(input, subset = (STD_code == Combinations[2, z]))
for (j in 1:100) {
Combo <- (C_1$Response_factor * j + C_2$Response_factor * (100 - j)) / sum((C_1$Response_factor * j + C_2$Response_factor * (100 - j)), na.rm = TRUE)
# Check for NA values in REF or Combo before comparison
if (!any(is.na(REF)) && !any(is.na(Combo)) && Distance > (sum(sqrt((REF - Combo)^2)))) {
results$Comp_1 <- as.character(C_1$STD_code)
results$Comp_2 <- as.character(C_2$STD_code)
results$Fraction_Comp_1 <- j
results$Simulated_pattern <- Combo
Distance <- sum(sqrt((REF - Combo)^2))
}
}
}
# Calculate concentrations (ng per microliter)
# Calculate concentrations (ng per microliter)
results$RF_1st <- NA
results$RF_2nd <- NA
for (i in 1:nrow(results)) {
results$RF_1st[i] <- input$Sum_response_factor[input$STD_code == results$Comp_1[i]]
results$RF_2nd[i] <- input$Sum_response_factor[input$STD_code == results$Comp_2[i]]
}
results <- results %>%
mutate(
RF_1st = as.numeric(RF_1st),
RF_2nd = as.numeric(RF_2nd),
Concentration = sum(Area) / (RF_1st * (Fraction_Comp_1 / 100) + RF_2nd * ((100 - Fraction_Comp_1) / 100))
)
# Visualization of results
plot_table <- data.frame(
Distribution = c(results$Relative_distribution, results$Simulated_pattern),
Homologue = results$Homologue,
Chain_length = results$Chain_length,
Origin = rep(as.factor(c("Measured", "Simulated")), each = nrow(results))
)
plot_table$Homologue <- factor(plot_table$Homologue, levels = unique(plot_table$Homologue))
plot <- ggplot(plot_table, aes(x = Homologue, y = Distribution * 100, fill = Origin, colour = Origin)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8, size = .4) +
theme(panel.background = element_blank()) +
scale_fill_manual(values = c("darkolivegreen3", "darkslategray4")) +
scale_color_manual(values = c("darkolivegreen4", "darkslategray")) +
ggtitle(label = paste(sample.name, " - Distribution of CP homologues")) +
theme(plot.title = element_text(size = 10, face = "bold", hjust = 0)) +
xlab("") + ylab("Relative area distribution, %") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(
legend.key.size = unit(0.15, "in"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(fill = NA, colour = "grey20"),
panel.grid.major.y = element_line(colour = "grey50"),
panel.grid.minor.y = element_line(colour = "grey80"),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill = "grey20"),
strip.text = element_text(colour = "white", face = "bold")
) +
facet_wrap(. ~ Chain_length, scales = "free", nrow = 4, ncol = 4)
results_output <- results %>%
summarise(median(Concentration)) %>%
mutate(
Type = results$Type[1],
Sample = sample.name,
Comment = paste("The best match:", Fraction_Comp_1[1], "% of ", Comp_1[1], " and ", 100 - Fraction_Comp_1[1], "% of ", Comp_2[1])
) %>%
rename("Total concentration, ng/ÂµL" = "median(Concentration)")
#####SECTION FOR SAMPLE PROCESSING#####
# Iterating over each data frame in the list
for (sample_df in list_of_samples) {
# Get the 'Replicate Name' value from the data frame
sample_name <- sample_df$`Replicate Name`
# Set sample name
# (You can print the sample name to verify it's correct)
print(paste("Processing sample:", sample_name))
# Now you can use the sample_df for further processing
####RUN PATTERN RECONSTRACTION FOR SELECTED (LOADED) SAMPLE####
sample_df <- sample_df |>
mutate(
Chain_length = as.factor(Chain_length),
Area = as.numeric(Area),
Relative_distribution = Area / sum(Area, na.rm = TRUE)
)
#Calculate relative area distribution within each homologue group
sample_df$Relative_distribution <- NA
sample_df$Area[is.na(sample$Area)] <- 0
sample_df <- sample_df %>% mutate(Relative_distribution = Area/sum(Area, na.rm = TRUE))
results <- sample_df
results[c("Comp_1","Comp_2","Fraction_Comp_1","Simulated_pattern")] <- NA
# Create 'results' data frame and perform other operations as needed
results <- sample_df
results[c("Comp_1", "Comp_2", "Fraction_Comp_1", "Simulated_pattern")] <- NA
# Deconvolution of homologue patterns (adjust your loop accordingly)
REF <- sample_df$Relative_distribution
Distance <- 100
for (z in 1:length(Combinations[1,])) {
C_1 <- subset(input, subset = (STD_code == Combinations[1, z]))
C_2 <- subset(input, subset = (STD_code == Combinations[2, z]))
for (j in 1:100) {
Combo <- (C_1$Response_factor * j + C_2$Response_factor * (100 - j)) / sum((C_1$Response_factor * j + C_2$Response_factor * (100 - j)), na.rm = TRUE)
# Check for NA values in REF or Combo before comparison
if (!any(is.na(REF)) && !any(is.na(Combo)) && Distance > (sum(sqrt((REF - Combo)^2)))) {
results$Comp_1 <- as.character(C_1$STD_code)
results$Comp_2 <- as.character(C_2$STD_code)
results$Fraction_Comp_1 <- j
results$Simulated_pattern <- Combo
Distance <- sum(sqrt((REF - Combo)^2))
}
}
}
# Calculate concentrations (ng per microliter)
# Calculate concentrations (ng per microliter)
results$RF_1st <- NA
results$RF_2nd <- NA
for (i in 1:nrow(results)) {
results$RF_1st[i] <- input$Sum_response_factor[input$STD_code == results$Comp_1[i]]
results$RF_2nd[i] <- input$Sum_response_factor[input$STD_code == results$Comp_2[i]]
}
results <- results %>%
mutate(
RF_1st = as.numeric(RF_1st),
RF_2nd = as.numeric(RF_2nd),
Concentration = sum(Area) / (RF_1st * (Fraction_Comp_1 / 100) + RF_2nd * ((100 - Fraction_Comp_1) / 100))
)
# Visualization of results
plot_table <- data.frame(
Distribution = c(results$Relative_distribution, results$Simulated_pattern),
Homologue = results$Homologue,
Chain_length = results$Chain_length,
Origin = rep(as.factor(c("Measured", "Simulated")), each = nrow(results))
)
plot_table$Homologue <- factor(plot_table$Homologue, levels = unique(plot_table$Homologue))
plot <- ggplot(plot_table, aes(x = Homologue, y = Distribution * 100, fill = Origin, colour = Origin)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8, size = .4) +
theme(panel.background = element_blank()) +
scale_fill_manual(values = c("darkolivegreen3", "darkslategray4")) +
scale_color_manual(values = c("darkolivegreen4", "darkslategray")) +
ggtitle(label = paste(sample.name, " - Distribution of CP homologues")) +
theme(plot.title = element_text(size = 10, face = "bold", hjust = 0)) +
xlab("") + ylab("Relative area distribution, %") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(
legend.key.size = unit(0.15, "in"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(fill = NA, colour = "grey20"),
panel.grid.major.y = element_line(colour = "grey50"),
panel.grid.minor.y = element_line(colour = "grey80"),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill = "grey20"),
strip.text = element_text(colour = "white", face = "bold")
) +
facet_wrap(. ~ Chain_length, scales = "free", nrow = 4, ncol = 4)
results_output <- results %>%
summarise(median(Concentration)) %>%
mutate(
Type = results$Type[1],
Sample = sample.name,
Comment = paste("The best match:", Fraction_Comp_1[1], "% of ", Comp_1[1], " and ", 100 - Fraction_Comp_1[1], "% of ", Comp_2[1])
) %>%
rename("Total concentration, ng/ÂµL" = "median(Concentration)")
}
####VIEW RESULTS####
#View Overview
print(results_output)
#View full results
print(results)
#View graph
plot
#####SECTION FOR SAMPLE PROCESSING#####
# Iterating over each data frame in the list
for (sample_df in list_of_samples) {
# Get the 'Replicate Name' value from the data frame
sample_name <- sample_df$`Replicate Name`
# Set sample name
# (You can print the sample name to verify it's correct)
print(paste("Processing sample:", sample_name))
# Now you can use the sample_df for further processing
####RUN PATTERN RECONSTRACTION FOR SELECTED (LOADED) SAMPLE####
sample_df <- sample_df |>
mutate(
Chain_length = as.factor(Chain_length),
Area = as.numeric(Area),
Relative_distribution = Area / sum(Area, na.rm = TRUE)
)
#Calculate relative area distribution within each homologue group
sample_df$Relative_distribution <- NA
sample_df$Area[is.na(sample$Area)] <- 0
sample_df <- sample_df %>% mutate(Relative_distribution = Area/sum(Area, na.rm = TRUE))
results <- sample_df
results[c("Comp_1","Comp_2","Fraction_Comp_1","Simulated_pattern")] <- NA
# Create 'results' data frame and perform other operations as needed
results <- sample_df
results[c("Comp_1", "Comp_2", "Fraction_Comp_1", "Simulated_pattern")] <- NA
# Deconvolution of homologue patterns (adjust your loop accordingly)
REF <- sample_df$Relative_distribution
Distance <- 100
for (z in 1:length(Combinations[1,])) {
C_1 <- subset(input, subset = (STD_code == Combinations[1, z]))
C_2 <- subset(input, subset = (STD_code == Combinations[2, z]))
for (j in 1:100) {
Combo <- (C_1$Response_factor * j + C_2$Response_factor * (100 - j)) / sum((C_1$Response_factor * j + C_2$Response_factor * (100 - j)), na.rm = TRUE)
# Check for NA values in REF or Combo before comparison
if (!any(is.na(REF)) && !any(is.na(Combo)) && Distance > (sum(sqrt((REF - Combo)^2)))) {
results$Comp_1 <- as.character(C_1$STD_code)
results$Comp_2 <- as.character(C_2$STD_code)
results$Fraction_Comp_1 <- j
results$Simulated_pattern <- Combo
Distance <- sum(sqrt((REF - Combo)^2))
}
}
}
# Calculate concentrations (ng per microliter)
# Calculate concentrations (ng per microliter)
results$RF_1st <- NA
results$RF_2nd <- NA
for (i in 1:nrow(results)) {
results$RF_1st[i] <- input$Sum_response_factor[input$STD_code == results$Comp_1[i]]
results$RF_2nd[i] <- input$Sum_response_factor[input$STD_code == results$Comp_2[i]]
}
results <- results %>%
mutate(
RF_1st = as.numeric(RF_1st),
RF_2nd = as.numeric(RF_2nd),
Concentration = sum(Area) / (RF_1st * (Fraction_Comp_1 / 100) + RF_2nd * ((100 - Fraction_Comp_1) / 100))
)
# Visualization of results
plot_table <- data.frame(
Distribution = c(results$Relative_distribution, results$Simulated_pattern),
Homologue = results$Homologue,
Chain_length = results$Chain_length,
Origin = rep(as.factor(c("Measured", "Simulated")), each = nrow(results))
)
plot_table$Homologue <- factor(plot_table$Homologue, levels = unique(plot_table$Homologue))
plot <- ggplot(plot_table, aes(x = Homologue, y = Distribution * 100, fill = Origin, colour = Origin)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8, size = .4) +
theme(panel.background = element_blank()) +
scale_fill_manual(values = c("darkolivegreen3", "darkslategray4")) +
scale_color_manual(values = c("darkolivegreen4", "darkslategray")) +
ggtitle(label = paste(sample.name, " - Distribution of CP homologues")) +
theme(plot.title = element_text(size = 10, face = "bold", hjust = 0)) +
xlab("") + ylab("Relative area distribution, %") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(
legend.key.size = unit(0.15, "in"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(fill = NA, colour = "grey20"),
panel.grid.major.y = element_line(colour = "grey50"),
panel.grid.minor.y = element_line(colour = "grey80"),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill = "grey20"),
strip.text = element_text(colour = "white", face = "bold")
) +
facet_wrap(. ~ Chain_length, scales = "free", nrow = 4, ncol = 4)
results_output <- results %>%
summarise(median(Concentration)) %>%
mutate(
Type = results$Type[1],
Sample = sample.name,
Comment = paste("The best match:", Fraction_Comp_1[1], "% of ", Comp_1[1], " and ", 100 - Fraction_Comp_1[1], "% of ", Comp_2[1])
) %>%
rename("Total concentration, ng/ÂµL" = "median(Concentration)")
}
####VIEW RESULTS####
#View Overview
print(results_output)
#View full results
print(results)
#View graph
plot

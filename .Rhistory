geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8, size = .4) +
theme(panel.background = element_blank()) +
scale_fill_manual(values = c("darkolivegreen3", "darkslategray4")) +
scale_color_manual(values = c("darkolivegreen4", "darkslategray")) +
ggtitle(label = paste(sample_name, " - Distribution of CP homologues")) +
theme(plot.title = element_text(size = 10, face = "bold", hjust = 0)) +
xlab("") + ylab("Relative area distribution, %") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(
legend.key.size = unit(0.15, "in"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(fill = NA, colour = "grey20"),
panel.grid.major.y = element_line(colour = "grey50"),
panel.grid.minor.y = element_line(colour = "grey80"),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill = "grey20"),
strip.text = element_text(colour = "white", face = "bold")
) +
facet_wrap(. ~ Chain_length, scales = "free", nrow = 4, ncol = 4)
results_output <- results %>%
summarise(median(Concentration)) %>%
mutate(
Type = results$Type[1],
Sample = sample_name,
Comment = paste("The best match:", results$Fraction_Comp_1[1], "% of ", results$Comp_1[1], " and ", 100 - results$Fraction_Comp_1[1], "% of ", results$Comp_2[1])
) %>%
rename("Total concentration, ng/µL" = "median(Concentration)")
# Print results output
print(results_output)
}
####VIEW RESULTS####
#View Overview
print(results_output)
#View full results
print(results)
#View graph
plot
View(results)
View(results_output)
# Group samples for creating one data frame for each
list_of_samples <- split(TESTINGB, TESTINGB$`Replicate Name`)
#####Set working directory#####
working.directory <- "F:/LINKOPING/Manuscripts/Skyline/Skyline/"
#####PREPARE DATASET FOR PATTERN RECONSTRUCTION#####
{
# Open input file
input <- combined_df
input$STD_code <- as.factor(input$STD_code)
# Create all possible binary combinations between given calibration sets
Combinations <- combn(x = levels(input$STD_code), m = 2, FUN = NULL, simplify = TRUE)
# Store sum RFs for each group CP standard
input <- input %>%
group_by(Reference_standard) %>%
mutate(Sum_response_factor = sum(Response_factor, na.rm = TRUE))
input[1:5] <- lapply(input[1:5], as.factor)
input$Response_factor[is.na(input$Response_factor)] <- 0
}
# Extract unique sample names
unique_sample_names <- unique(TESTINGB$`Replicate Name`)
# Iterate over each unique sample name
for (sample_name in unique_sample_names) {
# Get the corresponding sample dataframe
sample_df <- list_of_samples[[sample_name]]
# Set sample name
print(paste("Processing sample:", sample_name))
# Now you can use the sample_df for further processing
####RUN PATTERN RECONSTRUCTION FOR SELECTED (LOADED) SAMPLE####
sample_df <- sample_df %>%
mutate(
Chain_length = as.factor(Chain_length),
Area = as.numeric(Area),
Relative_distribution = Area / sum(Area, na.rm = TRUE)
)
# Calculate relative area distribution within each homologue group
sample_df$Relative_distribution <- NA
sample_df$Area[is.na(sample_df$Area)] <- 0
sample_df <- sample_df %>% mutate(Relative_distribution = Area / sum(Area, na.rm = TRUE))
results <- sample_df
results[c("Comp_1", "Comp_2", "Fraction_Comp_1", "Simulated_pattern")] <- NA
# Deconvolution of homologue patterns (adjust your loop accordingly)
REF <- sample_df$Relative_distribution
Distance <- 100
for (z in 1:length(Combinations[1,])) {
C_1 <- subset(input, subset = (STD_code == Combinations[1, z]))
C_2 <- subset(input, subset = (STD_code == Combinations[2, z]))
for (j in 1:100) {
Combo <- (C_1$Response_factor * j + C_2$Response_factor * (100 - j)) / sum((C_1$Response_factor * j + C_2$Response_factor * (100 - j)), na.rm = TRUE)
# Check for NA values in REF or Combo before comparison
if (!any(is.na(REF)) && !any(is.na(Combo)) && Distance > (sum(sqrt((REF - Combo)^2)))) {
results$Comp_1 <- as.character(C_1$STD_code)
results$Comp_2 <- as.character(C_2$STD_code)
results$Fraction_Comp_1 <- j
results$Simulated_pattern <- Combo
Distance <- sum(sqrt((REF - Combo)^2))
}
}
}
# Calculate concentrations (ng per microliter)
results$RF_1st <- NA
results$RF_2nd <- NA
for (i in 1:nrow(results)) {
results$RF_1st[i] <- input$Sum_response_factor[input$STD_code == results$Comp_1[i]]
results$RF_2nd[i] <- input$Sum_response_factor[input$STD_code == results$Comp_2[i]]
}
results <- results %>%
mutate(
RF_1st = as.numeric(RF_1st),
RF_2nd = as.numeric(RF_2nd),
Concentration = sum(Area) / (RF_1st * (Fraction_Comp_1 / 100) + RF_2nd * ((100 - Fraction_Comp_1) / 100))
)
# Visualization of results
plot_table <- data.frame(
Distribution = c(results$Relative_distribution, results$Simulated_pattern),
Homologue = results$Homologue,
Chain_length = results$Chain_length,
Origin = rep(as.factor(c("Measured", "Simulated")), each = nrow(results))
)
plot_table$Homologue <- factor(plot_table$Homologue, levels = unique(plot_table$Homologue))
plot <- ggplot(plot_table, aes(x = Homologue, y = Distribution * 100, fill = Origin, colour = Origin)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8, size = .4) +
theme(panel.background = element_blank()) +
scale_fill_manual(values = c("darkolivegreen3", "darkslategray4")) +
scale_color_manual(values = c("darkolivegreen4", "darkslategray")) +
ggtitle(label = paste(sample_name, " - Distribution of CP homologues")) +
theme(plot.title = element_text(size = 10, face = "bold", hjust = 0)) +
xlab("") + ylab("Relative area distribution, %") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(
legend.key.size = unit(0.15, "in"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(fill = NA, colour = "grey20"),
panel.grid.major.y = element_line(colour = "grey50"),
panel.grid.minor.y = element_line(colour = "grey80"),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill = "grey20"),
strip.text = element_text(colour = "white", face = "bold")
) +
facet_wrap(. ~ Chain_length, scales = "free", nrow = 4, ncol = 4)
results_output <- results %>%
summarise(median(Concentration)) %>%
mutate(
Type = results$Type[1],
Sample = sample_name,
Comment = paste("The best match:", results$Fraction_Comp_1[1], "% of ", results$Comp_1[1], " and ", 100 - results$Fraction_Comp_1[1], "% of ", results$Comp_2[1])
) %>%
rename("Total concentration, ng/µL" = "median(Concentration)")
# Print results output
print(results_output)
}
#####SECTION FOR SAMPLE PROCESSING#####
# Initialize an empty list to store results for all samples
all_results <- list()
# Extract unique sample names
unique_sample_names <- unique(TESTINGB$`Replicate Name`)
# Iterate over each unique sample name
for (sample_name in unique_sample_names) {
# Get the corresponding sample dataframe
sample_df <- list_of_samples[[sample_name]]
# Set sample name
print(paste("Processing sample:", sample_name))
# Now you can use the sample_df for further processing
####RUN PATTERN RECONSTRUCTION FOR SELECTED (LOADED) SAMPLE####
sample_df <- sample_df %>%
mutate(
Chain_length = as.factor(Chain_length),
Area = as.numeric(Area),
Relative_distribution = Area / sum(Area, na.rm = TRUE)
)
# Calculate relative area distribution within each homologue group
sample_df$Relative_distribution <- NA
sample_df$Area[is.na(sample_df$Area)] <- 0
sample_df <- sample_df %>% mutate(Relative_distribution = Area / sum(Area, na.rm = TRUE))
results <- sample_df
results[c("Comp_1", "Comp_2", "Fraction_Comp_1", "Simulated_pattern")] <- NA
# Deconvolution of homologue patterns (adjust your loop accordingly)
REF <- sample_df$Relative_distribution
Distance <- 100
for (z in 1:length(Combinations[1,])) {
C_1 <- subset(input, subset = (STD_code == Combinations[1, z]))
C_2 <- subset(input, subset = (STD_code == Combinations[2, z]))
for (j in 1:100) {
Combo <- (C_1$Response_factor * j + C_2$Response_factor * (100 - j)) / sum((C_1$Response_factor * j + C_2$Response_factor * (100 - j)), na.rm = TRUE)
# Check for NA values in REF or Combo before comparison
if (!any(is.na(REF)) && !any(is.na(Combo)) && Distance > (sum(sqrt((REF - Combo)^2)))) {
results$Comp_1 <- as.character(C_1$STD_code)
results$Comp_2 <- as.character(C_2$STD_code)
results$Fraction_Comp_1 <- j
results$Simulated_pattern <- Combo
Distance <- sum(sqrt((REF - Combo)^2))
}
}
}
# Calculate concentrations (ng per microliter)
results$RF_1st <- NA
results$RF_2nd <- NA
for (i in 1:nrow(results)) {
results$RF_1st[i] <- input$Sum_response_factor[input$STD_code == results$Comp_1[i]]
results$RF_2nd[i] <- input$Sum_response_factor[input$STD_code == results$Comp_2[i]]
}
results <- results %>%
mutate(
RF_1st = as.numeric(RF_1st),
RF_2nd = as.numeric(RF_2nd),
Concentration = sum(Area) / (RF_1st * (Fraction_Comp_1 / 100) + RF_2nd * ((100 - Fraction_Comp_1) / 100))
)
# Store the results for the current sample in the list
all_results[[sample_name]] <- results
# Visualization of results
plot_table <- data.frame(
Distribution = c(results$Relative_distribution, results$Simulated_pattern),
Homologue = results$Homologue,
Chain_length = results$Chain_length,
Origin = rep(as.factor(c("Measured", "Simulated")), each = nrow(results))
)
plot_table$Homologue <- factor(plot_table$Homologue, levels = unique(plot_table$Homologue))
plot <- ggplot(plot_table, aes(x = Homologue, y = Distribution * 100, fill = Origin, colour = Origin)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8, size = .4) +
theme(panel.background = element_blank()) +
scale_fill_manual(values = c("darkolivegreen3", "darkslategray4")) +
scale_color_manual(values = c("darkolivegreen4", "darkslategray")) +
ggtitle(label = paste(sample_name, " - Distribution of CP homologues")) +
theme(plot.title = element_text(size = 10, face = "bold", hjust = 0)) +
xlab("") + ylab("Relative area distribution, %") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(
legend.key.size = unit(0.15, "in"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(fill = NA, colour = "grey20"),
panel.grid.major.y = element_line(colour = "grey50"),
panel.grid.minor.y = element_line(colour = "grey80"),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill = "grey20"),
strip.text = element_text(colour = "white", face = "bold")
) +
facet_wrap(. ~ Chain_length, scales = "free", nrow = 4, ncol = 4)
results_output <- results %>%
summarise(median(Concentration)) %>%
mutate(
Type = results$Type[1],
Sample = sample_name,
Comment = paste("The best match:", results$Fraction_Comp_1[1], "% of ", results$Comp_1[1], " and ", 100 - results$Fraction_Comp_1[1], "% of ", results$Comp_2[1])
) %>%
rename("Total concentration, ng/µL" = "median(Concentration)")
# Combine results for all samples into a single dataframe
all_results_df <- bind_rows(all_results, .id = "Sample")
# Print or further process the combined results dataframe
print(all_results_df)
# Print results output
print(results_output)
}
####VIEW RESULTS####
#View Overview
print(results_output)
#View full results
print(results)
#View graph
plot
####VIEW RESULTS####
#View Overview
print(results_output)
#View full results
print(results)
#View graph
plot
View(all_results)
View(all_results_df)
####VIEW RESULTS####
#View Overview
print(all_results_df)
#View full results
print(all_results_df)
all_plos <- list()
#####SECTION FOR SAMPLE PROCESSING#####
# Initialize an empty list to store results for all samples
all_results <- list()
all_plos <- list()
# Extract unique sample names
unique_sample_names <- unique(TESTINGB$`Replicate Name`)
# Iterate over each unique sample name
for (sample_name in unique_sample_names) {
# Get the corresponding sample dataframe
sample_df <- list_of_samples[[sample_name]]
# Set sample name
print(paste("Processing sample:", sample_name))
# Now you can use the sample_df for further processing
####RUN PATTERN RECONSTRUCTION FOR SELECTED (LOADED) SAMPLE####
sample_df <- sample_df %>%
mutate(
Chain_length = as.factor(Chain_length),
Area = as.numeric(Area),
Relative_distribution = Area / sum(Area, na.rm = TRUE)
)
# Calculate relative area distribution within each homologue group
sample_df$Relative_distribution <- NA
sample_df$Area[is.na(sample_df$Area)] <- 0
sample_df <- sample_df %>% mutate(Relative_distribution = Area / sum(Area, na.rm = TRUE))
results <- sample_df
results[c("Comp_1", "Comp_2", "Fraction_Comp_1", "Simulated_pattern")] <- NA
# Deconvolution of homologue patterns (adjust your loop accordingly)
REF <- sample_df$Relative_distribution
Distance <- 100
for (z in 1:length(Combinations[1,])) {
C_1 <- subset(input, subset = (STD_code == Combinations[1, z]))
C_2 <- subset(input, subset = (STD_code == Combinations[2, z]))
for (j in 1:100) {
Combo <- (C_1$Response_factor * j + C_2$Response_factor * (100 - j)) / sum((C_1$Response_factor * j + C_2$Response_factor * (100 - j)), na.rm = TRUE)
# Check for NA values in REF or Combo before comparison
if (!any(is.na(REF)) && !any(is.na(Combo)) && Distance > (sum(sqrt((REF - Combo)^2)))) {
results$Comp_1 <- as.character(C_1$STD_code)
results$Comp_2 <- as.character(C_2$STD_code)
results$Fraction_Comp_1 <- j
results$Simulated_pattern <- Combo
Distance <- sum(sqrt((REF - Combo)^2))
}
}
}
# Calculate concentrations (ng per microliter)
results$RF_1st <- NA
results$RF_2nd <- NA
for (i in 1:nrow(results)) {
results$RF_1st[i] <- input$Sum_response_factor[input$STD_code == results$Comp_1[i]]
results$RF_2nd[i] <- input$Sum_response_factor[input$STD_code == results$Comp_2[i]]
}
results <- results %>%
mutate(
RF_1st = as.numeric(RF_1st),
RF_2nd = as.numeric(RF_2nd),
Concentration = sum(Area) / (RF_1st * (Fraction_Comp_1 / 100) + RF_2nd * ((100 - Fraction_Comp_1) / 100))
)
# Store the results for the current sample in the list
all_results[[sample_name]] <- results
# Visualization of results
plot_table <- data.frame(
Distribution = c(results$Relative_distribution, results$Simulated_pattern),
Homologue = results$Homologue,
Chain_length = results$Chain_length,
Origin = rep(as.factor(c("Measured", "Simulated")), each = nrow(results))
)
plot_table$Homologue <- factor(plot_table$Homologue, levels = unique(plot_table$Homologue))
plot <- ggplot(plot_table, aes(x = Homologue, y = Distribution * 100, fill = Origin, colour = Origin)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8, size = .4) +
theme(panel.background = element_blank()) +
scale_fill_manual(values = c("darkolivegreen3", "darkslategray4")) +
scale_color_manual(values = c("darkolivegreen4", "darkslategray")) +
ggtitle(label = paste(sample_name, " - Distribution of CP homologues")) +
theme(plot.title = element_text(size = 10, face = "bold", hjust = 0)) +
xlab("") + ylab("Relative area distribution, %") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(
legend.key.size = unit(0.15, "in"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(fill = NA, colour = "grey20"),
panel.grid.major.y = element_line(colour = "grey50"),
panel.grid.minor.y = element_line(colour = "grey80"),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill = "grey20"),
strip.text = element_text(colour = "white", face = "bold")
) +
facet_wrap(. ~ Chain_length, scales = "free", nrow = 4, ncol = 4)
# Store the plot for the current sample in the list
all_plots[[sample_name]] <- plot
results_output <- results %>%
summarise(median(Concentration)) %>%
mutate(
Type = results$Type[1],
Sample = sample_name,
Comment = paste("The best match:", results$Fraction_Comp_1[1], "% of ", results$Comp_1[1], " and ", 100 - results$Fraction_Comp_1[1], "% of ", results$Comp_2[1])
) %>%
rename("Total concentration, ng/µL" = "median(Concentration)")
# Combine results for all samples into a single dataframe
all_results_df <- bind_rows(all_results, .id = "Sample")
# Print or further process the combined results dataframe
print(all_results_df)
# Print results output
print(results_output)
}
####VIEW RESULTS####
#View Overview
print(all_results_df)
#####SECTION FOR SAMPLE PROCESSING#####
# Initialize an empty list to store results for all samples
all_results <- list()
all_plots <- list()
# Extract unique sample names
unique_sample_names <- unique(TESTINGB$`Replicate Name`)
# Iterate over each unique sample name
for (sample_name in unique_sample_names) {
# Get the corresponding sample dataframe
sample_df <- list_of_samples[[sample_name]]
# Set sample name
print(paste("Processing sample:", sample_name))
# Now you can use the sample_df for further processing
####RUN PATTERN RECONSTRUCTION FOR SELECTED (LOADED) SAMPLE####
sample_df <- sample_df %>%
mutate(
Chain_length = as.factor(Chain_length),
Area = as.numeric(Area),
Relative_distribution = Area / sum(Area, na.rm = TRUE)
)
# Calculate relative area distribution within each homologue group
sample_df$Relative_distribution <- NA
sample_df$Area[is.na(sample_df$Area)] <- 0
sample_df <- sample_df %>% mutate(Relative_distribution = Area / sum(Area, na.rm = TRUE))
results <- sample_df
results[c("Comp_1", "Comp_2", "Fraction_Comp_1", "Simulated_pattern")] <- NA
# Deconvolution of homologue patterns (adjust your loop accordingly)
REF <- sample_df$Relative_distribution
Distance <- 100
for (z in 1:length(Combinations[1,])) {
C_1 <- subset(input, subset = (STD_code == Combinations[1, z]))
C_2 <- subset(input, subset = (STD_code == Combinations[2, z]))
for (j in 1:100) {
Combo <- (C_1$Response_factor * j + C_2$Response_factor * (100 - j)) / sum((C_1$Response_factor * j + C_2$Response_factor * (100 - j)), na.rm = TRUE)
# Check for NA values in REF or Combo before comparison
if (!any(is.na(REF)) && !any(is.na(Combo)) && Distance > (sum(sqrt((REF - Combo)^2)))) {
results$Comp_1 <- as.character(C_1$STD_code)
results$Comp_2 <- as.character(C_2$STD_code)
results$Fraction_Comp_1 <- j
results$Simulated_pattern <- Combo
Distance <- sum(sqrt((REF - Combo)^2))
}
}
}
# Calculate concentrations (ng per microliter)
results$RF_1st <- NA
results$RF_2nd <- NA
for (i in 1:nrow(results)) {
results$RF_1st[i] <- input$Sum_response_factor[input$STD_code == results$Comp_1[i]]
results$RF_2nd[i] <- input$Sum_response_factor[input$STD_code == results$Comp_2[i]]
}
results <- results %>%
mutate(
RF_1st = as.numeric(RF_1st),
RF_2nd = as.numeric(RF_2nd),
Concentration = sum(Area) / (RF_1st * (Fraction_Comp_1 / 100) + RF_2nd * ((100 - Fraction_Comp_1) / 100))
)
# Store the results for the current sample in the list
all_results[[sample_name]] <- results
# Visualization of results
plot_table <- data.frame(
Distribution = c(results$Relative_distribution, results$Simulated_pattern),
Homologue = results$Homologue,
Chain_length = results$Chain_length,
Origin = rep(as.factor(c("Measured", "Simulated")), each = nrow(results))
)
plot_table$Homologue <- factor(plot_table$Homologue, levels = unique(plot_table$Homologue))
plot <- ggplot(plot_table, aes(x = Homologue, y = Distribution * 100, fill = Origin, colour = Origin)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8, size = .4) +
theme(panel.background = element_blank()) +
scale_fill_manual(values = c("darkolivegreen3", "darkslategray4")) +
scale_color_manual(values = c("darkolivegreen4", "darkslategray")) +
ggtitle(label = paste(sample_name, " - Distribution of CP homologues")) +
theme(plot.title = element_text(size = 10, face = "bold", hjust = 0)) +
xlab("") + ylab("Relative area distribution, %") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(
legend.key.size = unit(0.15, "in"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(fill = NA, colour = "grey20"),
panel.grid.major.y = element_line(colour = "grey50"),
panel.grid.minor.y = element_line(colour = "grey80"),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill = "grey20"),
strip.text = element_text(colour = "white", face = "bold")
) +
facet_wrap(. ~ Chain_length, scales = "free", nrow = 4, ncol = 4)
# Store the plot for the current sample in the list
all_plots[[sample_name]] <- plot
results_output <- results %>%
summarise(median(Concentration)) %>%
mutate(
Type = results$Type[1],
Sample = sample_name,
Comment = paste("The best match:", results$Fraction_Comp_1[1], "% of ", results$Comp_1[1], " and ", 100 - results$Fraction_Comp_1[1], "% of ", results$Comp_2[1])
) %>%
rename("Total concentration, ng/µL" = "median(Concentration)")
# Combine results for all samples into a single dataframe
all_results_df <- bind_rows(all_results, .id = "Sample")
# Print or further process the combined results dataframe
print(all_results_df)
# Print results output
print(results_output)
}
View(all_plots)
all_plots[["D1"]]
all_plots[["D2"]]
all_plots[["D3"]]
View(all_results)
View(all_plos)
#View graph
plot
View(all_plots)
#View graph
all_plots[["D1"]
#View graph
all_plots[["D1"]]
all_plots[["D3"]]
